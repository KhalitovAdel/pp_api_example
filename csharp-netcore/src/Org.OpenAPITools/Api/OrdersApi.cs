/*
 * Integration
 *
 *          Here can be some description if that needed     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryCity">Stad (optional)</param>
        /// <param name="deliveryLineCountFrom"> (optional)</param>
        /// <param name="deliveryLineCountTo"> (optional)</param>
        /// <param name="deliveryName">Mottagarnamn (optional)</param>
        /// <param name="documentNumber">Dokumentnummer (optional)</param>
        /// <param name="dvolumeFrom">Levererad volym fr책n (optional)</param>
        /// <param name="dvolumeTo">Levererad volym till (optional)</param>
        /// <param name="endDate">Slutdatum (optional)</param>
        /// <param name="excludeAttached"> (optional)</param>
        /// <param name="isCloseFilter"> (optional)</param>
        /// <param name="isOpenFilter"> (optional)</param>
        /// <param name="startDate">Startdatum (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OrderDto&gt;</returns>
        List<OrderDto> ListOrders(string deliveryCity = default(string), decimal? deliveryLineCountFrom = default(decimal?), decimal? deliveryLineCountTo = default(decimal?), string deliveryName = default(string), string documentNumber = default(string), decimal? dvolumeFrom = default(decimal?), decimal? dvolumeTo = default(decimal?), string endDate = default(string), bool? excludeAttached = default(bool?), bool? isCloseFilter = default(bool?), bool? isOpenFilter = default(bool?), string startDate = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryCity">Stad (optional)</param>
        /// <param name="deliveryLineCountFrom"> (optional)</param>
        /// <param name="deliveryLineCountTo"> (optional)</param>
        /// <param name="deliveryName">Mottagarnamn (optional)</param>
        /// <param name="documentNumber">Dokumentnummer (optional)</param>
        /// <param name="dvolumeFrom">Levererad volym fr책n (optional)</param>
        /// <param name="dvolumeTo">Levererad volym till (optional)</param>
        /// <param name="endDate">Slutdatum (optional)</param>
        /// <param name="excludeAttached"> (optional)</param>
        /// <param name="isCloseFilter"> (optional)</param>
        /// <param name="isOpenFilter"> (optional)</param>
        /// <param name="startDate">Startdatum (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OrderDto&gt;</returns>
        ApiResponse<List<OrderDto>> ListOrdersWithHttpInfo(string deliveryCity = default(string), decimal? deliveryLineCountFrom = default(decimal?), decimal? deliveryLineCountTo = default(decimal?), string deliveryName = default(string), string documentNumber = default(string), decimal? dvolumeFrom = default(decimal?), decimal? dvolumeTo = default(decimal?), string endDate = default(string), bool? excludeAttached = default(bool?), bool? isCloseFilter = default(bool?), bool? isOpenFilter = default(bool?), string startDate = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderDto</returns>
        OrderDto ReadOrder(string orderNumber, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderDto</returns>
        ApiResponse<OrderDto> ReadOrderWithHttpInfo(string orderNumber, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryCity">Stad (optional)</param>
        /// <param name="deliveryLineCountFrom"> (optional)</param>
        /// <param name="deliveryLineCountTo"> (optional)</param>
        /// <param name="deliveryName">Mottagarnamn (optional)</param>
        /// <param name="documentNumber">Dokumentnummer (optional)</param>
        /// <param name="dvolumeFrom">Levererad volym fr책n (optional)</param>
        /// <param name="dvolumeTo">Levererad volym till (optional)</param>
        /// <param name="endDate">Slutdatum (optional)</param>
        /// <param name="excludeAttached"> (optional)</param>
        /// <param name="isCloseFilter"> (optional)</param>
        /// <param name="isOpenFilter"> (optional)</param>
        /// <param name="startDate">Startdatum (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrderDto&gt;</returns>
        System.Threading.Tasks.Task<List<OrderDto>> ListOrdersAsync(string deliveryCity = default(string), decimal? deliveryLineCountFrom = default(decimal?), decimal? deliveryLineCountTo = default(decimal?), string deliveryName = default(string), string documentNumber = default(string), decimal? dvolumeFrom = default(decimal?), decimal? dvolumeTo = default(decimal?), string endDate = default(string), bool? excludeAttached = default(bool?), bool? isCloseFilter = default(bool?), bool? isOpenFilter = default(bool?), string startDate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryCity">Stad (optional)</param>
        /// <param name="deliveryLineCountFrom"> (optional)</param>
        /// <param name="deliveryLineCountTo"> (optional)</param>
        /// <param name="deliveryName">Mottagarnamn (optional)</param>
        /// <param name="documentNumber">Dokumentnummer (optional)</param>
        /// <param name="dvolumeFrom">Levererad volym fr책n (optional)</param>
        /// <param name="dvolumeTo">Levererad volym till (optional)</param>
        /// <param name="endDate">Slutdatum (optional)</param>
        /// <param name="excludeAttached"> (optional)</param>
        /// <param name="isCloseFilter"> (optional)</param>
        /// <param name="isOpenFilter"> (optional)</param>
        /// <param name="startDate">Startdatum (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrderDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderDto>>> ListOrdersWithHttpInfoAsync(string deliveryCity = default(string), decimal? deliveryLineCountFrom = default(decimal?), decimal? deliveryLineCountTo = default(decimal?), string deliveryName = default(string), string documentNumber = default(string), decimal? dvolumeFrom = default(decimal?), decimal? dvolumeTo = default(decimal?), string endDate = default(string), bool? excludeAttached = default(bool?), bool? isCloseFilter = default(bool?), bool? isOpenFilter = default(bool?), string startDate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDto</returns>
        System.Threading.Tasks.Task<OrderDto> ReadOrderAsync(string orderNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDto>> ReadOrderWithHttpInfoAsync(string orderNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IOrdersApiSync, IOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IOrdersApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrdersApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryCity">Stad (optional)</param>
        /// <param name="deliveryLineCountFrom"> (optional)</param>
        /// <param name="deliveryLineCountTo"> (optional)</param>
        /// <param name="deliveryName">Mottagarnamn (optional)</param>
        /// <param name="documentNumber">Dokumentnummer (optional)</param>
        /// <param name="dvolumeFrom">Levererad volym fr책n (optional)</param>
        /// <param name="dvolumeTo">Levererad volym till (optional)</param>
        /// <param name="endDate">Slutdatum (optional)</param>
        /// <param name="excludeAttached"> (optional)</param>
        /// <param name="isCloseFilter"> (optional)</param>
        /// <param name="isOpenFilter"> (optional)</param>
        /// <param name="startDate">Startdatum (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OrderDto&gt;</returns>
        public List<OrderDto> ListOrders(string deliveryCity = default(string), decimal? deliveryLineCountFrom = default(decimal?), decimal? deliveryLineCountTo = default(decimal?), string deliveryName = default(string), string documentNumber = default(string), decimal? dvolumeFrom = default(decimal?), decimal? dvolumeTo = default(decimal?), string endDate = default(string), bool? excludeAttached = default(bool?), bool? isCloseFilter = default(bool?), bool? isOpenFilter = default(bool?), string startDate = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<OrderDto>> localVarResponse = ListOrdersWithHttpInfo(deliveryCity, deliveryLineCountFrom, deliveryLineCountTo, deliveryName, documentNumber, dvolumeFrom, dvolumeTo, endDate, excludeAttached, isCloseFilter, isOpenFilter, startDate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryCity">Stad (optional)</param>
        /// <param name="deliveryLineCountFrom"> (optional)</param>
        /// <param name="deliveryLineCountTo"> (optional)</param>
        /// <param name="deliveryName">Mottagarnamn (optional)</param>
        /// <param name="documentNumber">Dokumentnummer (optional)</param>
        /// <param name="dvolumeFrom">Levererad volym fr책n (optional)</param>
        /// <param name="dvolumeTo">Levererad volym till (optional)</param>
        /// <param name="endDate">Slutdatum (optional)</param>
        /// <param name="excludeAttached"> (optional)</param>
        /// <param name="isCloseFilter"> (optional)</param>
        /// <param name="isOpenFilter"> (optional)</param>
        /// <param name="startDate">Startdatum (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OrderDto&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<OrderDto>> ListOrdersWithHttpInfo(string deliveryCity = default(string), decimal? deliveryLineCountFrom = default(decimal?), decimal? deliveryLineCountTo = default(decimal?), string deliveryName = default(string), string documentNumber = default(string), decimal? dvolumeFrom = default(decimal?), decimal? dvolumeTo = default(decimal?), string endDate = default(string), bool? excludeAttached = default(bool?), bool? isCloseFilter = default(bool?), bool? isOpenFilter = default(bool?), string startDate = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (deliveryCity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deliveryCity", deliveryCity));
            }
            if (deliveryLineCountFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deliveryLineCountFrom", deliveryLineCountFrom));
            }
            if (deliveryLineCountTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deliveryLineCountTo", deliveryLineCountTo));
            }
            if (deliveryName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deliveryName", deliveryName));
            }
            if (documentNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentNumber", documentNumber));
            }
            if (dvolumeFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dvolumeFrom", dvolumeFrom));
            }
            if (dvolumeTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dvolumeTo", dvolumeTo));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (excludeAttached != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "excludeAttached", excludeAttached));
            }
            if (isCloseFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "isCloseFilter", isCloseFilter));
            }
            if (isOpenFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "isOpenFilter", isOpenFilter));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }

            localVarRequestOptions.Operation = "OrdersApi.ListOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OrderDto>>("/api-ext/v1.0/orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryCity">Stad (optional)</param>
        /// <param name="deliveryLineCountFrom"> (optional)</param>
        /// <param name="deliveryLineCountTo"> (optional)</param>
        /// <param name="deliveryName">Mottagarnamn (optional)</param>
        /// <param name="documentNumber">Dokumentnummer (optional)</param>
        /// <param name="dvolumeFrom">Levererad volym fr책n (optional)</param>
        /// <param name="dvolumeTo">Levererad volym till (optional)</param>
        /// <param name="endDate">Slutdatum (optional)</param>
        /// <param name="excludeAttached"> (optional)</param>
        /// <param name="isCloseFilter"> (optional)</param>
        /// <param name="isOpenFilter"> (optional)</param>
        /// <param name="startDate">Startdatum (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrderDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderDto>> ListOrdersAsync(string deliveryCity = default(string), decimal? deliveryLineCountFrom = default(decimal?), decimal? deliveryLineCountTo = default(decimal?), string deliveryName = default(string), string documentNumber = default(string), decimal? dvolumeFrom = default(decimal?), decimal? dvolumeTo = default(decimal?), string endDate = default(string), bool? excludeAttached = default(bool?), bool? isCloseFilter = default(bool?), bool? isOpenFilter = default(bool?), string startDate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<OrderDto>> localVarResponse = await ListOrdersWithHttpInfoAsync(deliveryCity, deliveryLineCountFrom, deliveryLineCountTo, deliveryName, documentNumber, dvolumeFrom, dvolumeTo, endDate, excludeAttached, isCloseFilter, isOpenFilter, startDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deliveryCity">Stad (optional)</param>
        /// <param name="deliveryLineCountFrom"> (optional)</param>
        /// <param name="deliveryLineCountTo"> (optional)</param>
        /// <param name="deliveryName">Mottagarnamn (optional)</param>
        /// <param name="documentNumber">Dokumentnummer (optional)</param>
        /// <param name="dvolumeFrom">Levererad volym fr책n (optional)</param>
        /// <param name="dvolumeTo">Levererad volym till (optional)</param>
        /// <param name="endDate">Slutdatum (optional)</param>
        /// <param name="excludeAttached"> (optional)</param>
        /// <param name="isCloseFilter"> (optional)</param>
        /// <param name="isOpenFilter"> (optional)</param>
        /// <param name="startDate">Startdatum (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrderDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<OrderDto>>> ListOrdersWithHttpInfoAsync(string deliveryCity = default(string), decimal? deliveryLineCountFrom = default(decimal?), decimal? deliveryLineCountTo = default(decimal?), string deliveryName = default(string), string documentNumber = default(string), decimal? dvolumeFrom = default(decimal?), decimal? dvolumeTo = default(decimal?), string endDate = default(string), bool? excludeAttached = default(bool?), bool? isCloseFilter = default(bool?), bool? isOpenFilter = default(bool?), string startDate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (deliveryCity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deliveryCity", deliveryCity));
            }
            if (deliveryLineCountFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deliveryLineCountFrom", deliveryLineCountFrom));
            }
            if (deliveryLineCountTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deliveryLineCountTo", deliveryLineCountTo));
            }
            if (deliveryName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deliveryName", deliveryName));
            }
            if (documentNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "documentNumber", documentNumber));
            }
            if (dvolumeFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dvolumeFrom", dvolumeFrom));
            }
            if (dvolumeTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dvolumeTo", dvolumeTo));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (excludeAttached != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "excludeAttached", excludeAttached));
            }
            if (isCloseFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "isCloseFilter", isCloseFilter));
            }
            if (isOpenFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "isOpenFilter", isOpenFilter));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }

            localVarRequestOptions.Operation = "OrdersApi.ListOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OrderDto>>("/api-ext/v1.0/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderDto</returns>
        public OrderDto ReadOrder(string orderNumber, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OrderDto> localVarResponse = ReadOrderWithHttpInfo(orderNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderDto</returns>
        public Org.OpenAPITools.Client.ApiResponse<OrderDto> ReadOrderWithHttpInfo(string orderNumber, int operationIndex = 0)
        {
            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->ReadOrder");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("orderNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter

            localVarRequestOptions.Operation = "OrdersApi.ReadOrder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderDto>("/api-ext/v1.0/orders/{orderNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDto</returns>
        public async System.Threading.Tasks.Task<OrderDto> ReadOrderAsync(string orderNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OrderDto> localVarResponse = await ReadOrderWithHttpInfoAsync(orderNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDto)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderDto>> ReadOrderWithHttpInfoAsync(string orderNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderNumber' when calling OrdersApi->ReadOrder");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("orderNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(orderNumber)); // path parameter

            localVarRequestOptions.Operation = "OrdersApi.ReadOrder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderDto>("/api-ext/v1.0/orders/{orderNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
