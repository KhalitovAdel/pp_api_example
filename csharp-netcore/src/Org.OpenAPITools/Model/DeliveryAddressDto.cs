/*
 * Integration
 *
 *          Here can be some description if that needed     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DeliveryAddressDto
    /// </summary>
    [DataContract(Name = "DeliveryAddressDto")]
    public partial class DeliveryAddressDto : IEquatable<DeliveryAddressDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryAddressDto" /> class.
        /// </summary>
        /// <param name="city">Stad.</param>
        /// <param name="country">Land.</param>
        /// <param name="postalCode">Postnummer.</param>
        /// <param name="addressLine1">Adressrad #1.</param>
        /// <param name="addressLine2">Adressrad #2.</param>
        public DeliveryAddressDto(string city = default(string), string country = default(string), string postalCode = default(string), string addressLine1 = default(string), string addressLine2 = default(string))
        {
            this.City = city;
            this.Country = country;
            this.PostalCode = postalCode;
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
        }

        /// <summary>
        /// Stad
        /// </summary>
        /// <value>Stad</value>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Land
        /// </summary>
        /// <value>Land</value>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Postnummer
        /// </summary>
        /// <value>Postnummer</value>
        [DataMember(Name = "postalCode", EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Adressrad #1
        /// </summary>
        /// <value>Adressrad #1</value>
        [DataMember(Name = "addressLine1", EmitDefaultValue = true)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Adressrad #2
        /// </summary>
        /// <value>Adressrad #2</value>
        [DataMember(Name = "addressLine2", EmitDefaultValue = true)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeliveryAddressDto {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeliveryAddressDto);
        }

        /// <summary>
        /// Returns true if DeliveryAddressDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliveryAddressDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryAddressDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.AddressLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine1.GetHashCode();
                }
                if (this.AddressLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine2.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
