/*
 * Integration
 *
 *          Here can be some description if that needed     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ErrorDto
    /// </summary>
    [DataContract(Name = "ErrorDto")]
    public partial class ErrorDto : IEquatable<ErrorDto>, IValidatableObject
    {
        /// <summary>
        /// Defines StatusCode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusCodeEnum
        {
            /// <summary>
            /// Enum _400 for value: 400
            /// </summary>
            [EnumMember(Value = "400")]
            _400 = 1,

            /// <summary>
            /// Enum _401 for value: 401
            /// </summary>
            [EnumMember(Value = "401")]
            _401 = 2,

            /// <summary>
            /// Enum _404 for value: 404
            /// </summary>
            [EnumMember(Value = "404")]
            _404 = 3,

            /// <summary>
            /// Enum _500 for value: 500
            /// </summary>
            [EnumMember(Value = "500")]
            _500 = 4

        }


        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name = "statusCode", IsRequired = true, EmitDefaultValue = true)]
        public StatusCodeEnum StatusCode { get; set; }
        /// <summary>
        /// Defines Code
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum INTERNALERROR for value: INTERNAL_ERROR
            /// </summary>
            [EnumMember(Value = "INTERNAL_ERROR")]
            INTERNALERROR = 1,

            /// <summary>
            /// Enum INVALIDINPUT for value: INVALID_INPUT
            /// </summary>
            [EnumMember(Value = "INVALID_INPUT")]
            INVALIDINPUT = 2,

            /// <summary>
            /// Enum REQUESTTIMEOUT for value: REQUEST_TIMEOUT
            /// </summary>
            [EnumMember(Value = "REQUEST_TIMEOUT")]
            REQUESTTIMEOUT = 3,

            /// <summary>
            /// Enum INVALIDID for value: INVALID_ID
            /// </summary>
            [EnumMember(Value = "INVALID_ID")]
            INVALIDID = 4,

            /// <summary>
            /// Enum ACCESSVIOLATION for value: ACCESS_VIOLATION
            /// </summary>
            [EnumMember(Value = "ACCESS_VIOLATION")]
            ACCESSVIOLATION = 5,

            /// <summary>
            /// Enum NOTNULLEXPECTED for value: NOT_NULL_EXPECTED
            /// </summary>
            [EnumMember(Value = "NOT_NULL_EXPECTED")]
            NOTNULLEXPECTED = 6,

            /// <summary>
            /// Enum ENDDATEISBEFORESTARTDATE for value: END_DATE_IS_BEFORE_START_DATE
            /// </summary>
            [EnumMember(Value = "END_DATE_IS_BEFORE_START_DATE")]
            ENDDATEISBEFORESTARTDATE = 7,

            /// <summary>
            /// Enum VALUEALREADYCHANGED for value: VALUE_ALREADY_CHANGED
            /// </summary>
            [EnumMember(Value = "VALUE_ALREADY_CHANGED")]
            VALUEALREADYCHANGED = 8,

            /// <summary>
            /// Enum TOOMANYREQUESTS for value: TOO_MANY_REQUESTS
            /// </summary>
            [EnumMember(Value = "TOO_MANY_REQUESTS")]
            TOOMANYREQUESTS = 9,

            /// <summary>
            /// Enum NOTAUTHORIZED for value: NOT_AUTHORIZED
            /// </summary>
            [EnumMember(Value = "NOT_AUTHORIZED")]
            NOTAUTHORIZED = 10,

            /// <summary>
            /// Enum LANDFILLNOTFOUND for value: LANDFILL_NOT_FOUND
            /// </summary>
            [EnumMember(Value = "LANDFILL_NOT_FOUND")]
            LANDFILLNOTFOUND = 11,

            /// <summary>
            /// Enum LANDFILLINVALIDRECEIVERUSER for value: LANDFILL_INVALID_RECEIVER_USER
            /// </summary>
            [EnumMember(Value = "LANDFILL_INVALID_RECEIVER_USER")]
            LANDFILLINVALIDRECEIVERUSER = 12,

            /// <summary>
            /// Enum LANDFILLCUSTOMERREQUIRED for value: LANDFILL_CUSTOMER_REQUIRED
            /// </summary>
            [EnumMember(Value = "LANDFILL_CUSTOMER_REQUIRED")]
            LANDFILLCUSTOMERREQUIRED = 13,

            /// <summary>
            /// Enum INVALIDLAYERTYPEFORLANDFILL for value: INVALID_LAYER_TYPE_FOR_LANDFILL
            /// </summary>
            [EnumMember(Value = "INVALID_LAYER_TYPE_FOR_LANDFILL")]
            INVALIDLAYERTYPEFORLANDFILL = 14,

            /// <summary>
            /// Enum INVALIDSUBAREAPRICECHANGE for value: INVALID_SUBAREA_PRICE_CHANGE
            /// </summary>
            [EnumMember(Value = "INVALID_SUBAREA_PRICE_CHANGE")]
            INVALIDSUBAREAPRICECHANGE = 15,

            /// <summary>
            /// Enum ORDERNOTFOUND for value: ORDER_NOT_FOUND
            /// </summary>
            [EnumMember(Value = "ORDER_NOT_FOUND")]
            ORDERNOTFOUND = 16,

            /// <summary>
            /// Enum ORDERALREADYATTACHED for value: ORDER_ALREADY_ATTACHED
            /// </summary>
            [EnumMember(Value = "ORDER_ALREADY_ATTACHED")]
            ORDERALREADYATTACHED = 17,

            /// <summary>
            /// Enum ORDERRECEIPTSDIRECTORYEXISTS for value: ORDER_RECEIPTS_DIRECTORY_EXISTS
            /// </summary>
            [EnumMember(Value = "ORDER_RECEIPTS_DIRECTORY_EXISTS")]
            ORDERRECEIPTSDIRECTORYEXISTS = 18,

            /// <summary>
            /// Enum ORDERRECEIPTSDIRECTORYRENAMEERROR for value: ORDER_RECEIPTS_DIRECTORY_RENAME_ERROR
            /// </summary>
            [EnumMember(Value = "ORDER_RECEIPTS_DIRECTORY_RENAME_ERROR")]
            ORDERRECEIPTSDIRECTORYRENAMEERROR = 19,

            /// <summary>
            /// Enum ORDERRECEIPTSFILERENAMEERROR for value: ORDER_RECEIPTS_FILE_RENAME_ERROR
            /// </summary>
            [EnumMember(Value = "ORDER_RECEIPTS_FILE_RENAME_ERROR")]
            ORDERRECEIPTSFILERENAMEERROR = 20,

            /// <summary>
            /// Enum PROJECTISNOTAVAILABLE for value: PROJECT_IS_NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "PROJECT_IS_NOT_AVAILABLE")]
            PROJECTISNOTAVAILABLE = 21,

            /// <summary>
            /// Enum DUMPLOADNOTFOUND for value: DUMP_LOAD_NOT_FOUND
            /// </summary>
            [EnumMember(Value = "DUMP_LOAD_NOT_FOUND")]
            DUMPLOADNOTFOUND = 22,

            /// <summary>
            /// Enum PROJECTNAMEINVALID for value: PROJECT_NAME_INVALID
            /// </summary>
            [EnumMember(Value = "PROJECT_NAME_INVALID")]
            PROJECTNAMEINVALID = 23,

            /// <summary>
            /// Enum PROJECTNOTFOUND for value: PROJECT_NOT_FOUND
            /// </summary>
            [EnumMember(Value = "PROJECT_NOT_FOUND")]
            PROJECTNOTFOUND = 24,

            /// <summary>
            /// Enum PROJECTHASORDERWITHOTHERCUSTOMER for value: PROJECT_HAS_ORDER_WITH_OTHER_CUSTOMER
            /// </summary>
            [EnumMember(Value = "PROJECT_HAS_ORDER_WITH_OTHER_CUSTOMER")]
            PROJECTHASORDERWITHOTHERCUSTOMER = 25,

            /// <summary>
            /// Enum PROJECTHASCUSTOMER for value: PROJECT_HAS_CUSTOMER
            /// </summary>
            [EnumMember(Value = "PROJECT_HAS_CUSTOMER")]
            PROJECTHASCUSTOMER = 26,

            /// <summary>
            /// Enum PROJECTACTIVELOCATIONCANNOTBECHANGED for value: PROJECT_ACTIVE_LOCATION_CANNOT_BE_CHANGED
            /// </summary>
            [EnumMember(Value = "PROJECT_ACTIVE_LOCATION_CANNOT_BE_CHANGED")]
            PROJECTACTIVELOCATIONCANNOTBECHANGED = 27,

            /// <summary>
            /// Enum PROJECTCUSTOMERREQUIRED for value: PROJECT_CUSTOMER_REQUIRED
            /// </summary>
            [EnumMember(Value = "PROJECT_CUSTOMER_REQUIRED")]
            PROJECTCUSTOMERREQUIRED = 28,

            /// <summary>
            /// Enum EMAILBLOCKED for value: EMAIL_BLOCKED
            /// </summary>
            [EnumMember(Value = "EMAIL_BLOCKED")]
            EMAILBLOCKED = 29,

            /// <summary>
            /// Enum DUMPLOADSTATUSUNKNOWN for value: DUMP_LOAD_STATUS_UNKNOWN
            /// </summary>
            [EnumMember(Value = "DUMP_LOAD_STATUS_UNKNOWN")]
            DUMPLOADSTATUSUNKNOWN = 30,

            /// <summary>
            /// Enum DUMPLOADINVALIDTARGETSTATUSORNOPERMISSIONS for value: DUMP_LOAD_INVALID_TARGET_STATUS_OR_NO_PERMISSIONS
            /// </summary>
            [EnumMember(Value = "DUMP_LOAD_INVALID_TARGET_STATUS_OR_NO_PERMISSIONS")]
            DUMPLOADINVALIDTARGETSTATUSORNOPERMISSIONS = 31,

            /// <summary>
            /// Enum DUMPLOADNOPERMISSIONS for value: DUMP_LOAD_NO_PERMISSIONS
            /// </summary>
            [EnumMember(Value = "DUMP_LOAD_NO_PERMISSIONS")]
            DUMPLOADNOPERMISSIONS = 32,

            /// <summary>
            /// Enum DUMPLOADEDITFORBIDDENINCURRENTSTATUS for value: DUMP_LOAD_EDIT_FORBIDDEN_IN_CURRENT_STATUS
            /// </summary>
            [EnumMember(Value = "DUMP_LOAD_EDIT_FORBIDDEN_IN_CURRENT_STATUS")]
            DUMPLOADEDITFORBIDDENINCURRENTSTATUS = 33,

            /// <summary>
            /// Enum DUMPLOADFIELDSHAVEINVALIDVALUES for value: DUMP_LOAD_FIELDS_HAVE_INVALID_VALUES
            /// </summary>
            [EnumMember(Value = "DUMP_LOAD_FIELDS_HAVE_INVALID_VALUES")]
            DUMPLOADFIELDSHAVEINVALIDVALUES = 34,

            /// <summary>
            /// Enum DUMPLOADFIELDSINVALIDCONDITIONS for value: DUMP_LOAD_FIELDS_INVALID_CONDITIONS
            /// </summary>
            [EnumMember(Value = "DUMP_LOAD_FIELDS_INVALID_CONDITIONS")]
            DUMPLOADFIELDSINVALIDCONDITIONS = 35,

            /// <summary>
            /// Enum DUMPLOADNOTSPECIFIED for value: DUMP_LOAD_NOT_SPECIFIED
            /// </summary>
            [EnumMember(Value = "DUMP_LOAD_NOT_SPECIFIED")]
            DUMPLOADNOTSPECIFIED = 36,

            /// <summary>
            /// Enum DUMPLOADNOTSIGNED for value: DUMP_LOAD_NOT_SIGNED
            /// </summary>
            [EnumMember(Value = "DUMP_LOAD_NOT_SIGNED")]
            DUMPLOADNOTSIGNED = 37,

            /// <summary>
            /// Enum DUMPLOADNEEDTOSEND for value: DUMP_LOAD_NEED_TO_SEND
            /// </summary>
            [EnumMember(Value = "DUMP_LOAD_NEED_TO_SEND")]
            DUMPLOADNEEDTOSEND = 38,

            /// <summary>
            /// Enum DUMPLOADCUSTOMERNEEDFORSIGN for value: DUMP_LOAD_CUSTOMER_NEED_FOR_SIGN
            /// </summary>
            [EnumMember(Value = "DUMP_LOAD_CUSTOMER_NEED_FOR_SIGN")]
            DUMPLOADCUSTOMERNEEDFORSIGN = 39,

            /// <summary>
            /// Enum DRIVEREMAILEXISTS for value: DRIVER_EMAIL_EXISTS
            /// </summary>
            [EnumMember(Value = "DRIVER_EMAIL_EXISTS")]
            DRIVEREMAILEXISTS = 40,

            /// <summary>
            /// Enum DRIVERPHONEEXISTS for value: DRIVER_PHONE_EXISTS
            /// </summary>
            [EnumMember(Value = "DRIVER_PHONE_EXISTS")]
            DRIVERPHONEEXISTS = 41,

            /// <summary>
            /// Enum CANNOTSETDATEINPAST for value: CANNOT_SET_DATE_IN_PAST
            /// </summary>
            [EnumMember(Value = "CANNOT_SET_DATE_IN_PAST")]
            CANNOTSETDATEINPAST = 42,

            /// <summary>
            /// Enum PROJECTEDITFORBIDDENINCURRENTSTATUS for value: PROJECT_EDIT_FORBIDDEN_IN_CURRENT_STATUS
            /// </summary>
            [EnumMember(Value = "PROJECT_EDIT_FORBIDDEN_IN_CURRENT_STATUS")]
            PROJECTEDITFORBIDDENINCURRENTSTATUS = 43,

            /// <summary>
            /// Enum USEREXISTS for value: USER_EXISTS
            /// </summary>
            [EnumMember(Value = "USER_EXISTS")]
            USEREXISTS = 44,

            /// <summary>
            /// Enum USERNOTFOUND for value: USER_NOT_FOUND
            /// </summary>
            [EnumMember(Value = "USER_NOT_FOUND")]
            USERNOTFOUND = 45,

            /// <summary>
            /// Enum USEREMPTYOLDPASSWORD for value: USER_EMPTY_OLD_PASSWORD
            /// </summary>
            [EnumMember(Value = "USER_EMPTY_OLD_PASSWORD")]
            USEREMPTYOLDPASSWORD = 46,

            /// <summary>
            /// Enum USERINVALIDOLDPASSWORD for value: USER_INVALID_OLD_PASSWORD
            /// </summary>
            [EnumMember(Value = "USER_INVALID_OLD_PASSWORD")]
            USERINVALIDOLDPASSWORD = 47,

            /// <summary>
            /// Enum USERPASSWORDNOTEQUAL for value: USER_PASSWORD_NOT_EQUAL
            /// </summary>
            [EnumMember(Value = "USER_PASSWORD_NOT_EQUAL")]
            USERPASSWORDNOTEQUAL = 48,

            /// <summary>
            /// Enum USERPASSWORDSIMILARTOCURRENT for value: USER_PASSWORD_SIMILAR_TO_CURRENT
            /// </summary>
            [EnumMember(Value = "USER_PASSWORD_SIMILAR_TO_CURRENT")]
            USERPASSWORDSIMILARTOCURRENT = 49,

            /// <summary>
            /// Enum USERHASLINKEDPROJECTS for value: USER_HAS_LINKED_PROJECTS
            /// </summary>
            [EnumMember(Value = "USER_HAS_LINKED_PROJECTS")]
            USERHASLINKEDPROJECTS = 50,

            /// <summary>
            /// Enum USERREQUIREDCUSTOMER for value: USER_REQUIRED_CUSTOMER
            /// </summary>
            [EnumMember(Value = "USER_REQUIRED_CUSTOMER")]
            USERREQUIREDCUSTOMER = 51,

            /// <summary>
            /// Enum USERALREADYINVITED for value: USER_ALREADY_INVITED
            /// </summary>
            [EnumMember(Value = "USER_ALREADY_INVITED")]
            USERALREADYINVITED = 52,

            /// <summary>
            /// Enum EMAILEXISTS for value: EMAIL_EXISTS
            /// </summary>
            [EnumMember(Value = "EMAIL_EXISTS")]
            EMAILEXISTS = 53,

            /// <summary>
            /// Enum DRIVEREMPTYPASSWORD for value: DRIVER_EMPTY_PASSWORD
            /// </summary>
            [EnumMember(Value = "DRIVER_EMPTY_PASSWORD")]
            DRIVEREMPTYPASSWORD = 54,

            /// <summary>
            /// Enum DRIVERINVALIDOLDPASSWORD for value: DRIVER_INVALID_OLD_PASSWORD
            /// </summary>
            [EnumMember(Value = "DRIVER_INVALID_OLD_PASSWORD")]
            DRIVERINVALIDOLDPASSWORD = 55,

            /// <summary>
            /// Enum DRIVERPASSWORDNOTEQUAL for value: DRIVER_PASSWORD_NOT_EQUAL
            /// </summary>
            [EnumMember(Value = "DRIVER_PASSWORD_NOT_EQUAL")]
            DRIVERPASSWORDNOTEQUAL = 56,

            /// <summary>
            /// Enum EMPTYOWNER for value: EMPTY_OWNER
            /// </summary>
            [EnumMember(Value = "EMPTY_OWNER")]
            EMPTYOWNER = 57,

            /// <summary>
            /// Enum DUMPTYPEEXISTS for value: DUMP_TYPE_EXISTS
            /// </summary>
            [EnumMember(Value = "DUMP_TYPE_EXISTS")]
            DUMPTYPEEXISTS = 58,

            /// <summary>
            /// Enum DUMPTYPENAMECANNOTBEEMPTY for value: DUMP_TYPE_NAME_CANNOT_BE_EMPTY
            /// </summary>
            [EnumMember(Value = "DUMP_TYPE_NAME_CANNOT_BE_EMPTY")]
            DUMPTYPENAMECANNOTBEEMPTY = 59,

            /// <summary>
            /// Enum DUMPTYPEVOLUMECANNOTBEEMPTY for value: DUMP_TYPE_VOLUME_CANNOT_BE_EMPTY
            /// </summary>
            [EnumMember(Value = "DUMP_TYPE_VOLUME_CANNOT_BE_EMPTY")]
            DUMPTYPEVOLUMECANNOTBEEMPTY = 60,

            /// <summary>
            /// Enum DUMPTYPETONSPERM3MUSTBEPOSITIVE for value: DUMP_TYPE_TONS_PER_M3_MUST_BE_POSITIVE
            /// </summary>
            [EnumMember(Value = "DUMP_TYPE_TONS_PER_M3_MUST_BE_POSITIVE")]
            DUMPTYPETONSPERM3MUSTBEPOSITIVE = 61,

            /// <summary>
            /// Enum TOXICLIMITSINVALIDVALUE for value: TOXIC_LIMITS_INVALID_VALUE
            /// </summary>
            [EnumMember(Value = "TOXIC_LIMITS_INVALID_VALUE")]
            TOXICLIMITSINVALIDVALUE = 62,

            /// <summary>
            /// Enum SUBSTANCEISUSED for value: SUBSTANCE_IS_USED
            /// </summary>
            [EnumMember(Value = "SUBSTANCE_IS_USED")]
            SUBSTANCEISUSED = 63,

            /// <summary>
            /// Enum SUBSTANCECONTAMINATIONTYPEISUSED for value: SUBSTANCE_CONTAMINATION_TYPE_IS_USED
            /// </summary>
            [EnumMember(Value = "SUBSTANCE_CONTAMINATION_TYPE_IS_USED")]
            SUBSTANCECONTAMINATIONTYPEISUSED = 64,

            /// <summary>
            /// Enum PERMISSIONERROR for value: PERMISSION_ERROR
            /// </summary>
            [EnumMember(Value = "PERMISSION_ERROR")]
            PERMISSIONERROR = 65,

            /// <summary>
            /// Enum DELIVERYLINENOTFOUND for value: DELIVERY_LINE_NOT_FOUND
            /// </summary>
            [EnumMember(Value = "DELIVERY_LINE_NOT_FOUND")]
            DELIVERYLINENOTFOUND = 66,

            /// <summary>
            /// Enum COMPANYNOTFOUND for value: COMPANY_NOT_FOUND
            /// </summary>
            [EnumMember(Value = "COMPANY_NOT_FOUND")]
            COMPANYNOTFOUND = 67,

            /// <summary>
            /// Enum NETWORKERROR for value: NETWORK_ERROR
            /// </summary>
            [EnumMember(Value = "NETWORK_ERROR")]
            NETWORKERROR = 68,

            /// <summary>
            /// Enum LANDFILLSTATUSNOTFOUND for value: LANDFILL_STATUS_NOT_FOUND
            /// </summary>
            [EnumMember(Value = "LANDFILL_STATUS_NOT_FOUND")]
            LANDFILLSTATUSNOTFOUND = 69,

            /// <summary>
            /// Enum LANDFILLSTATUSNAMECANNOTBEEMPTY for value: LANDFILL_STATUS_NAME_CANNOT_BE_EMPTY
            /// </summary>
            [EnumMember(Value = "LANDFILL_STATUS_NAME_CANNOT_BE_EMPTY")]
            LANDFILLSTATUSNAMECANNOTBEEMPTY = 70,

            /// <summary>
            /// Enum LANDFILLSTATUSEXISTS for value: LANDFILL_STATUS_EXISTS
            /// </summary>
            [EnumMember(Value = "LANDFILL_STATUS_EXISTS")]
            LANDFILLSTATUSEXISTS = 71,

            /// <summary>
            /// Enum LANDFILLTYPECHANGENOTALLOWED for value: LANDFILL_TYPE_CHANGE_NOT_ALLOWED
            /// </summary>
            [EnumMember(Value = "LANDFILL_TYPE_CHANGE_NOT_ALLOWED")]
            LANDFILLTYPECHANGENOTALLOWED = 72,

            /// <summary>
            /// Enum LANDFILLISNOTAVAILABLE for value: LANDFILL_IS_NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "LANDFILL_IS_NOT_AVAILABLE")]
            LANDFILLISNOTAVAILABLE = 73,

            /// <summary>
            /// Enum FORTNOXENTITYNOTFOUND for value: FORTNOX_ENTITY_NOT_FOUND
            /// </summary>
            [EnumMember(Value = "FORTNOX_ENTITY_NOT_FOUND")]
            FORTNOXENTITYNOTFOUND = 74,

            /// <summary>
            /// Enum FORTNOXSYNCTIMEOUT for value: FORTNOX_SYNC_TIMEOUT
            /// </summary>
            [EnumMember(Value = "FORTNOX_SYNC_TIMEOUT")]
            FORTNOXSYNCTIMEOUT = 75,

            /// <summary>
            /// Enum FORTNOXANOTHERSYNCINPROGRESS for value: FORTNOX_ANOTHER_SYNC_IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "FORTNOX_ANOTHER_SYNC_IN_PROGRESS")]
            FORTNOXANOTHERSYNCINPROGRESS = 76,

            /// <summary>
            /// Enum FORTNOXNETWORKERROR for value: FORTNOX_NETWORK_ERROR
            /// </summary>
            [EnumMember(Value = "FORTNOX_NETWORK_ERROR")]
            FORTNOXNETWORKERROR = 77,

            /// <summary>
            /// Enum FORTNOXSYNCCANCELED for value: FORTNOX_SYNC_CANCELED
            /// </summary>
            [EnumMember(Value = "FORTNOX_SYNC_CANCELED")]
            FORTNOXSYNCCANCELED = 78,

            /// <summary>
            /// Enum EMPTYCOMPANY for value: EMPTY_COMPANY
            /// </summary>
            [EnumMember(Value = "EMPTY_COMPANY")]
            EMPTYCOMPANY = 79,

            /// <summary>
            /// Enum NOTIMPLEMENTED for value: NOT_IMPLEMENTED
            /// </summary>
            [EnumMember(Value = "NOT_IMPLEMENTED")]
            NOTIMPLEMENTED = 80,

            /// <summary>
            /// Enum DEVIATIONNOTFOUND for value: DEVIATION_NOT_FOUND
            /// </summary>
            [EnumMember(Value = "DEVIATION_NOT_FOUND")]
            DEVIATIONNOTFOUND = 81,

            /// <summary>
            /// Enum DEVIATIONINVALIDFIELDS for value: DEVIATION_INVALID_FIELDS
            /// </summary>
            [EnumMember(Value = "DEVIATION_INVALID_FIELDS")]
            DEVIATIONINVALIDFIELDS = 82,

            /// <summary>
            /// Enum FILENOTFOUND for value: FILE_NOT_FOUND
            /// </summary>
            [EnumMember(Value = "FILE_NOT_FOUND")]
            FILENOTFOUND = 83,

            /// <summary>
            /// Enum FILEEXISTS for value: FILE_EXISTS
            /// </summary>
            [EnumMember(Value = "FILE_EXISTS")]
            FILEEXISTS = 84,

            /// <summary>
            /// Enum FILETOOLARGE for value: FILE_TOO_LARGE
            /// </summary>
            [EnumMember(Value = "FILE_TOO_LARGE")]
            FILETOOLARGE = 85,

            /// <summary>
            /// Enum INVALIDFILENAME for value: INVALID_FILE_NAME
            /// </summary>
            [EnumMember(Value = "INVALID_FILE_NAME")]
            INVALIDFILENAME = 86,

            /// <summary>
            /// Enum CONVERSIONTOPDFERROR for value: CONVERSION_TO_PDF_ERROR
            /// </summary>
            [EnumMember(Value = "CONVERSION_TO_PDF_ERROR")]
            CONVERSIONTOPDFERROR = 87,

            /// <summary>
            /// Enum PROJECTENDDATEBEFORESTARTDATE for value: PROJECT_END_DATE_BEFORE_START_DATE
            /// </summary>
            [EnumMember(Value = "PROJECT_END_DATE_BEFORE_START_DATE")]
            PROJECTENDDATEBEFORESTARTDATE = 88,

            /// <summary>
            /// Enum PROJECTNODATECHANGEONGOINGMASS for value: PROJECT_NO_DATE_CHANGE_ONGOING_MASS
            /// </summary>
            [EnumMember(Value = "PROJECT_NO_DATE_CHANGE_ONGOING_MASS")]
            PROJECTNODATECHANGEONGOINGMASS = 89,

            /// <summary>
            /// Enum PROJECTSTARTDATEAFTERMASSSTARTDATE for value: PROJECT_START_DATE_AFTER_MASS_START_DATE
            /// </summary>
            [EnumMember(Value = "PROJECT_START_DATE_AFTER_MASS_START_DATE")]
            PROJECTSTARTDATEAFTERMASSSTARTDATE = 90,

            /// <summary>
            /// Enum PROJECTENDDATEBEFOREMASSENDDATE for value: PROJECT_END_DATE_BEFORE_MASS_END_DATE
            /// </summary>
            [EnumMember(Value = "PROJECT_END_DATE_BEFORE_MASS_END_DATE")]
            PROJECTENDDATEBEFOREMASSENDDATE = 91,

            /// <summary>
            /// Enum MASSSTARTDATEBEFOREPROJECTSTARTDATE for value: MASS_START_DATE_BEFORE_PROJECT_START_DATE
            /// </summary>
            [EnumMember(Value = "MASS_START_DATE_BEFORE_PROJECT_START_DATE")]
            MASSSTARTDATEBEFOREPROJECTSTARTDATE = 92,

            /// <summary>
            /// Enum MASSSTARTDATEBEFORETODAY for value: MASS_START_DATE_BEFORE_TODAY
            /// </summary>
            [EnumMember(Value = "MASS_START_DATE_BEFORE_TODAY")]
            MASSSTARTDATEBEFORETODAY = 93,

            /// <summary>
            /// Enum MASSENDDATEBEFOREPROJECTSTARTDATE for value: MASS_END_DATE_BEFORE_PROJECT_START_DATE
            /// </summary>
            [EnumMember(Value = "MASS_END_DATE_BEFORE_PROJECT_START_DATE")]
            MASSENDDATEBEFOREPROJECTSTARTDATE = 94,

            /// <summary>
            /// Enum MASSENDDATEBEFOREMASSSTARTDATE for value: MASS_END_DATE_BEFORE_MASS_START_DATE
            /// </summary>
            [EnumMember(Value = "MASS_END_DATE_BEFORE_MASS_START_DATE")]
            MASSENDDATEBEFOREMASSSTARTDATE = 95,

            /// <summary>
            /// Enum MASSENDDATEBEFORETODAY for value: MASS_END_DATE_BEFORE_TODAY
            /// </summary>
            [EnumMember(Value = "MASS_END_DATE_BEFORE_TODAY")]
            MASSENDDATEBEFORETODAY = 96,

            /// <summary>
            /// Enum PROJECTENDDATEMUSTBEUPDATED for value: PROJECT_END_DATE_MUST_BE_UPDATED
            /// </summary>
            [EnumMember(Value = "PROJECT_END_DATE_MUST_BE_UPDATED")]
            PROJECTENDDATEMUSTBEUPDATED = 97,

            /// <summary>
            /// Enum PROJECTLOCATIONONWATER for value: PROJECT_LOCATION_ON_WATER
            /// </summary>
            [EnumMember(Value = "PROJECT_LOCATION_ON_WATER")]
            PROJECTLOCATIONONWATER = 98,

            /// <summary>
            /// Enum LANDFILLLOCATIONONWATER for value: LANDFILL_LOCATION_ON_WATER
            /// </summary>
            [EnumMember(Value = "LANDFILL_LOCATION_ON_WATER")]
            LANDFILLLOCATIONONWATER = 99,

            /// <summary>
            /// Enum OPENFROMAFTEROPENTO for value: OPEN_FROM_AFTER_OPEN_TO
            /// </summary>
            [EnumMember(Value = "OPEN_FROM_AFTER_OPEN_TO")]
            OPENFROMAFTEROPENTO = 100,

            /// <summary>
            /// Enum NOOPENWORKDAY for value: NO_OPEN_WORK_DAY
            /// </summary>
            [EnumMember(Value = "NO_OPEN_WORK_DAY")]
            NOOPENWORKDAY = 101,

            /// <summary>
            /// Enum APIKEYNOTSPECIFIED for value: API_KEY_NOT_SPECIFIED
            /// </summary>
            [EnumMember(Value = "API_KEY_NOT_SPECIFIED")]
            APIKEYNOTSPECIFIED = 102,

            /// <summary>
            /// Enum APIKEYINVALID for value: API_KEY_INVALID
            /// </summary>
            [EnumMember(Value = "API_KEY_INVALID")]
            APIKEYINVALID = 103,

            /// <summary>
            /// Enum INVALIDLOCATION for value: INVALID_LOCATION
            /// </summary>
            [EnumMember(Value = "INVALID_LOCATION")]
            INVALIDLOCATION = 104,

            /// <summary>
            /// Enum PHONENUMBEREXISTS for value: PHONE_NUMBER_EXISTS
            /// </summary>
            [EnumMember(Value = "PHONE_NUMBER_EXISTS")]
            PHONENUMBEREXISTS = 105,

            /// <summary>
            /// Enum PHONENUMBERHAVETOBELOCALORINTERNATIONAL for value: PHONE_NUMBER_HAVE_TO_BE_LOCAL_OR_INTERNATIONAL
            /// </summary>
            [EnumMember(Value = "PHONE_NUMBER_HAVE_TO_BE_LOCAL_OR_INTERNATIONAL")]
            PHONENUMBERHAVETOBELOCALORINTERNATIONAL = 106,

            /// <summary>
            /// Enum PHONENUMBERTOOSHORT for value: PHONE_NUMBER_TOO_SHORT
            /// </summary>
            [EnumMember(Value = "PHONE_NUMBER_TOO_SHORT")]
            PHONENUMBERTOOSHORT = 107,

            /// <summary>
            /// Enum PHONENUMBERTOOLONG for value: PHONE_NUMBER_TOO_LONG
            /// </summary>
            [EnumMember(Value = "PHONE_NUMBER_TOO_LONG")]
            PHONENUMBERTOOLONG = 108

        }


        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public CodeEnum Code { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ErrorDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorDto" /> class.
        /// </summary>
        /// <param name="message">message (required).</param>
        /// <param name="timestamp">Returns a date as a string value in ISO format. (required).</param>
        /// <param name="statusCode">statusCode (required).</param>
        /// <param name="code">code (required).</param>
        public ErrorDto(string message = default(string), string timestamp = default(string), StatusCodeEnum statusCode = default(StatusCodeEnum), CodeEnum code = default(CodeEnum))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for ErrorDto and cannot be null");
            }
            this.Message = message;
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new ArgumentNullException("timestamp is a required property for ErrorDto and cannot be null");
            }
            this.Timestamp = timestamp;
            this.StatusCode = statusCode;
            this.Code = code;
        }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns a date as a string value in ISO format.
        /// </summary>
        /// <value>Returns a date as a string value in ISO format.</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrorDto {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErrorDto);
        }

        /// <summary>
        /// Returns true if ErrorDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ErrorDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    this.StatusCode.Equals(input.StatusCode)
                ) && 
                (
                    this.Code == input.Code ||
                    this.Code.Equals(input.Code)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatusCode.GetHashCode();
                hashCode = (hashCode * 59) + this.Code.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
