/*
 * Integration
 *
 *          Here can be some description if that needed     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrderDto
    /// </summary>
    [DataContract(Name = "OrderDto")]
    public partial class OrderDto : IEquatable<OrderDto>, IValidatableObject
    {
        /// <summary>
        /// Orderstatus
        /// </summary>
        /// <value>Orderstatus</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderStatusEnum
        {
            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 1,

            /// <summary>
            /// Enum OPENED for value: OPENED
            /// </summary>
            [EnumMember(Value = "OPENED")]
            OPENED = 2

        }


        /// <summary>
        /// Orderstatus
        /// </summary>
        /// <value>Orderstatus</value>
        [DataMember(Name = "orderStatus", IsRequired = true, EmitDefaultValue = true)]
        public OrderStatusEnum OrderStatus { get; set; }
        /// <summary>
        /// Synkronisering status
        /// </summary>
        /// <value>Synkronisering status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LastSyncStatusEnum
        {
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 1,

            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 2,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 3

        }


        /// <summary>
        /// Synkronisering status
        /// </summary>
        /// <value>Synkronisering status</value>
        [DataMember(Name = "lastSyncStatus", IsRequired = true, EmitDefaultValue = true)]
        public LastSyncStatusEnum LastSyncStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDto" /> class.
        /// </summary>
        /// <param name="id">Ordernummer (required).</param>
        /// <param name="orderStatus">Orderstatus (required).</param>
        /// <param name="customerId">Kund (required).</param>
        /// <param name="deliveryAddress">deliveryAddress (required).</param>
        /// <param name="lastSyncStatus">Synkronisering status (required).</param>
        /// <param name="deliveredVolume">Levererad volym (required).</param>
        /// <param name="createdAt">Skapades (required).</param>
        /// <param name="updatedAt">Senast ändrad (required).</param>
        /// <param name="lastSyncAt">Synkronisera (required).</param>
        /// <param name="documentNumber">Dokumentnummer.</param>
        /// <param name="projectNumber">Projektnummer.</param>
        /// <param name="salesResponsible">Ansvarig säljare.</param>
        /// <param name="orderDate">Orderdatum.</param>
        /// <param name="deliveryDate">Leveransdatum.</param>
        /// <param name="plannedStartDate">Planerat Startdatum.</param>
        /// <param name="deletedAt">deletedAt.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="deliveryName">Mottagarnamn.</param>
        /// <param name="deliveryLineCount">Leveranser.</param>
        public OrderDto(string id = default(string), OrderStatusEnum orderStatus = default(OrderStatusEnum), string customerId = default(string), OrderDtoDeliveryAddress deliveryAddress = default(OrderDtoDeliveryAddress), LastSyncStatusEnum lastSyncStatus = default(LastSyncStatusEnum), decimal deliveredVolume = default(decimal), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), DateTime? lastSyncAt = default(DateTime?), string documentNumber = default(string), string projectNumber = default(string), string salesResponsible = default(string), string orderDate = default(string), string deliveryDate = default(string), string plannedStartDate = default(string), DateTime? deletedAt = default(DateTime?), string updatedBy = default(string), string deliveryName = default(string), decimal? deliveryLineCount = default(decimal?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for OrderDto and cannot be null");
            }
            this.Id = id;
            this.OrderStatus = orderStatus;
            // to ensure "customerId" is required (not null)
            if (customerId == null)
            {
                throw new ArgumentNullException("customerId is a required property for OrderDto and cannot be null");
            }
            this.CustomerId = customerId;
            // to ensure "deliveryAddress" is required (not null)
            if (deliveryAddress == null)
            {
                throw new ArgumentNullException("deliveryAddress is a required property for OrderDto and cannot be null");
            }
            this.DeliveryAddress = deliveryAddress;
            this.LastSyncStatus = lastSyncStatus;
            this.DeliveredVolume = deliveredVolume;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            // to ensure "lastSyncAt" is required (not null)
            if (lastSyncAt == null)
            {
                throw new ArgumentNullException("lastSyncAt is a required property for OrderDto and cannot be null");
            }
            this.LastSyncAt = lastSyncAt;
            this.DocumentNumber = documentNumber;
            this.ProjectNumber = projectNumber;
            this.SalesResponsible = salesResponsible;
            this.OrderDate = orderDate;
            this.DeliveryDate = deliveryDate;
            this.PlannedStartDate = plannedStartDate;
            this.DeletedAt = deletedAt;
            this.UpdatedBy = updatedBy;
            this.DeliveryName = deliveryName;
            this.DeliveryLineCount = deliveryLineCount;
        }

        /// <summary>
        /// Ordernummer
        /// </summary>
        /// <value>Ordernummer</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Kund
        /// </summary>
        /// <value>Kund</value>
        [DataMember(Name = "customerId", IsRequired = true, EmitDefaultValue = true)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [DataMember(Name = "deliveryAddress", IsRequired = true, EmitDefaultValue = true)]
        public OrderDtoDeliveryAddress DeliveryAddress { get; set; }

        /// <summary>
        /// Levererad volym
        /// </summary>
        /// <value>Levererad volym</value>
        [DataMember(Name = "deliveredVolume", IsRequired = true, EmitDefaultValue = true)]
        public decimal DeliveredVolume { get; set; }

        /// <summary>
        /// Skapades
        /// </summary>
        /// <value>Skapades</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Senast ändrad
        /// </summary>
        /// <value>Senast ändrad</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Synkronisera
        /// </summary>
        /// <value>Synkronisera</value>
        [DataMember(Name = "lastSyncAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? LastSyncAt { get; set; }

        /// <summary>
        /// Dokumentnummer
        /// </summary>
        /// <value>Dokumentnummer</value>
        [DataMember(Name = "documentNumber", EmitDefaultValue = true)]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// Projektnummer
        /// </summary>
        /// <value>Projektnummer</value>
        [DataMember(Name = "projectNumber", EmitDefaultValue = true)]
        public string ProjectNumber { get; set; }

        /// <summary>
        /// Ansvarig säljare
        /// </summary>
        /// <value>Ansvarig säljare</value>
        [DataMember(Name = "salesResponsible", EmitDefaultValue = true)]
        public string SalesResponsible { get; set; }

        /// <summary>
        /// Orderdatum
        /// </summary>
        /// <value>Orderdatum</value>
        [DataMember(Name = "orderDate", EmitDefaultValue = true)]
        public string OrderDate { get; set; }

        /// <summary>
        /// Leveransdatum
        /// </summary>
        /// <value>Leveransdatum</value>
        [DataMember(Name = "deliveryDate", EmitDefaultValue = true)]
        public string DeliveryDate { get; set; }

        /// <summary>
        /// Planerat Startdatum
        /// </summary>
        /// <value>Planerat Startdatum</value>
        [DataMember(Name = "plannedStartDate", EmitDefaultValue = true)]
        public string PlannedStartDate { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name = "deletedAt", EmitDefaultValue = true)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name = "updatedBy", EmitDefaultValue = true)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// Mottagarnamn
        /// </summary>
        /// <value>Mottagarnamn</value>
        [DataMember(Name = "deliveryName", EmitDefaultValue = true)]
        public string DeliveryName { get; set; }

        /// <summary>
        /// Leveranser
        /// </summary>
        /// <value>Leveranser</value>
        [DataMember(Name = "deliveryLineCount", EmitDefaultValue = true)]
        public decimal? DeliveryLineCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  LastSyncStatus: ").Append(LastSyncStatus).Append("\n");
            sb.Append("  DeliveredVolume: ").Append(DeliveredVolume).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  LastSyncAt: ").Append(LastSyncAt).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  ProjectNumber: ").Append(ProjectNumber).Append("\n");
            sb.Append("  SalesResponsible: ").Append(SalesResponsible).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  PlannedStartDate: ").Append(PlannedStartDate).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  DeliveryName: ").Append(DeliveryName).Append("\n");
            sb.Append("  DeliveryLineCount: ").Append(DeliveryLineCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderDto);
        }

        /// <summary>
        /// Returns true if OrderDto instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrderStatus == input.OrderStatus ||
                    this.OrderStatus.Equals(input.OrderStatus)
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.DeliveryAddress == input.DeliveryAddress ||
                    (this.DeliveryAddress != null &&
                    this.DeliveryAddress.Equals(input.DeliveryAddress))
                ) && 
                (
                    this.LastSyncStatus == input.LastSyncStatus ||
                    this.LastSyncStatus.Equals(input.LastSyncStatus)
                ) && 
                (
                    this.DeliveredVolume == input.DeliveredVolume ||
                    this.DeliveredVolume.Equals(input.DeliveredVolume)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.LastSyncAt == input.LastSyncAt ||
                    (this.LastSyncAt != null &&
                    this.LastSyncAt.Equals(input.LastSyncAt))
                ) && 
                (
                    this.DocumentNumber == input.DocumentNumber ||
                    (this.DocumentNumber != null &&
                    this.DocumentNumber.Equals(input.DocumentNumber))
                ) && 
                (
                    this.ProjectNumber == input.ProjectNumber ||
                    (this.ProjectNumber != null &&
                    this.ProjectNumber.Equals(input.ProjectNumber))
                ) && 
                (
                    this.SalesResponsible == input.SalesResponsible ||
                    (this.SalesResponsible != null &&
                    this.SalesResponsible.Equals(input.SalesResponsible))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                ) && 
                (
                    this.PlannedStartDate == input.PlannedStartDate ||
                    (this.PlannedStartDate != null &&
                    this.PlannedStartDate.Equals(input.PlannedStartDate))
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.DeliveryName == input.DeliveryName ||
                    (this.DeliveryName != null &&
                    this.DeliveryName.Equals(input.DeliveryName))
                ) && 
                (
                    this.DeliveryLineCount == input.DeliveryLineCount ||
                    (this.DeliveryLineCount != null &&
                    this.DeliveryLineCount.Equals(input.DeliveryLineCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderStatus.GetHashCode();
                if (this.CustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                }
                if (this.DeliveryAddress != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LastSyncStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.DeliveredVolume.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.LastSyncAt != null)
                {
                    hashCode = (hashCode * 59) + this.LastSyncAt.GetHashCode();
                }
                if (this.DocumentNumber != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentNumber.GetHashCode();
                }
                if (this.ProjectNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectNumber.GetHashCode();
                }
                if (this.SalesResponsible != null)
                {
                    hashCode = (hashCode * 59) + this.SalesResponsible.GetHashCode();
                }
                if (this.OrderDate != null)
                {
                    hashCode = (hashCode * 59) + this.OrderDate.GetHashCode();
                }
                if (this.DeliveryDate != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryDate.GetHashCode();
                }
                if (this.PlannedStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.PlannedStartDate.GetHashCode();
                }
                if (this.DeletedAt != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedAt.GetHashCode();
                }
                if (this.UpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedBy.GetHashCode();
                }
                if (this.DeliveryName != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryName.GetHashCode();
                }
                if (this.DeliveryLineCount != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryLineCount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
