/*
Integration

         Here can be some description if that needed     

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// OrdersApiService OrdersApi service
type OrdersApiService service

type ApiListOrdersRequest struct {
	ctx context.Context
	ApiService *OrdersApiService
	deliveryCity *string
	deliveryLineCountFrom *float32
	deliveryLineCountTo *float32
	deliveryName *string
	documentNumber *string
	dvolumeFrom *float32
	dvolumeTo *float32
	endDate *string
	excludeAttached *bool
	isCloseFilter *bool
	isOpenFilter *bool
	startDate *string
}

// Stad
func (r ApiListOrdersRequest) DeliveryCity(deliveryCity string) ApiListOrdersRequest {
	r.deliveryCity = &deliveryCity
	return r
}

func (r ApiListOrdersRequest) DeliveryLineCountFrom(deliveryLineCountFrom float32) ApiListOrdersRequest {
	r.deliveryLineCountFrom = &deliveryLineCountFrom
	return r
}

func (r ApiListOrdersRequest) DeliveryLineCountTo(deliveryLineCountTo float32) ApiListOrdersRequest {
	r.deliveryLineCountTo = &deliveryLineCountTo
	return r
}

// Mottagarnamn
func (r ApiListOrdersRequest) DeliveryName(deliveryName string) ApiListOrdersRequest {
	r.deliveryName = &deliveryName
	return r
}

// Dokumentnummer
func (r ApiListOrdersRequest) DocumentNumber(documentNumber string) ApiListOrdersRequest {
	r.documentNumber = &documentNumber
	return r
}

// Levererad volym frÃ¥n
func (r ApiListOrdersRequest) DvolumeFrom(dvolumeFrom float32) ApiListOrdersRequest {
	r.dvolumeFrom = &dvolumeFrom
	return r
}

// Levererad volym till
func (r ApiListOrdersRequest) DvolumeTo(dvolumeTo float32) ApiListOrdersRequest {
	r.dvolumeTo = &dvolumeTo
	return r
}

// Slutdatum
func (r ApiListOrdersRequest) EndDate(endDate string) ApiListOrdersRequest {
	r.endDate = &endDate
	return r
}

func (r ApiListOrdersRequest) ExcludeAttached(excludeAttached bool) ApiListOrdersRequest {
	r.excludeAttached = &excludeAttached
	return r
}

func (r ApiListOrdersRequest) IsCloseFilter(isCloseFilter bool) ApiListOrdersRequest {
	r.isCloseFilter = &isCloseFilter
	return r
}

func (r ApiListOrdersRequest) IsOpenFilter(isOpenFilter bool) ApiListOrdersRequest {
	r.isOpenFilter = &isOpenFilter
	return r
}

// Startdatum
func (r ApiListOrdersRequest) StartDate(startDate string) ApiListOrdersRequest {
	r.startDate = &startDate
	return r
}

func (r ApiListOrdersRequest) Execute() ([]OrderDto, *http.Response, error) {
	return r.ApiService.ListOrdersExecute(r)
}

/*
ListOrders 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOrdersRequest
*/
func (a *OrdersApiService) ListOrders(ctx context.Context) ApiListOrdersRequest {
	return ApiListOrdersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OrderDto
func (a *OrdersApiService) ListOrdersExecute(r ApiListOrdersRequest) ([]OrderDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OrderDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersApiService.ListOrders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api-ext/v1.0/orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deliveryCity != nil {
		localVarQueryParams.Add("deliveryCity", parameterToString(*r.deliveryCity, ""))
	}
	if r.deliveryLineCountFrom != nil {
		localVarQueryParams.Add("deliveryLineCountFrom", parameterToString(*r.deliveryLineCountFrom, ""))
	}
	if r.deliveryLineCountTo != nil {
		localVarQueryParams.Add("deliveryLineCountTo", parameterToString(*r.deliveryLineCountTo, ""))
	}
	if r.deliveryName != nil {
		localVarQueryParams.Add("deliveryName", parameterToString(*r.deliveryName, ""))
	}
	if r.documentNumber != nil {
		localVarQueryParams.Add("documentNumber", parameterToString(*r.documentNumber, ""))
	}
	if r.dvolumeFrom != nil {
		localVarQueryParams.Add("dvolumeFrom", parameterToString(*r.dvolumeFrom, ""))
	}
	if r.dvolumeTo != nil {
		localVarQueryParams.Add("dvolumeTo", parameterToString(*r.dvolumeTo, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.excludeAttached != nil {
		localVarQueryParams.Add("excludeAttached", parameterToString(*r.excludeAttached, ""))
	}
	if r.isCloseFilter != nil {
		localVarQueryParams.Add("isCloseFilter", parameterToString(*r.isCloseFilter, ""))
	}
	if r.isOpenFilter != nil {
		localVarQueryParams.Add("isOpenFilter", parameterToString(*r.isOpenFilter, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ReadOrder400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedErrorDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ServerErrorDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadOrderRequest struct {
	ctx context.Context
	ApiService *OrdersApiService
	orderNumber string
}

func (r ApiReadOrderRequest) Execute() (*OrderDto, *http.Response, error) {
	return r.ApiService.ReadOrderExecute(r)
}

/*
ReadOrder 

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderNumber
 @return ApiReadOrderRequest
*/
func (a *OrdersApiService) ReadOrder(ctx context.Context, orderNumber string) ApiReadOrderRequest {
	return ApiReadOrderRequest{
		ApiService: a,
		ctx: ctx,
		orderNumber: orderNumber,
	}
}

// Execute executes the request
//  @return OrderDto
func (a *OrdersApiService) ReadOrderExecute(r ApiReadOrderRequest) (*OrderDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrderDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersApiService.ReadOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api-ext/v1.0/orders/{orderNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"orderNumber"+"}", url.PathEscape(parameterToString(r.orderNumber, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ReadOrder400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedErrorDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ServerErrorDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
