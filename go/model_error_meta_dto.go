/*
Integration

         Here can be some description if that needed     

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ErrorMetaDto struct for ErrorMetaDto
type ErrorMetaDto struct {
	Key string `json:"key"`
	Value map[string]interface{} `json:"value"`
	Msg string `json:"msg"`
}

// NewErrorMetaDto instantiates a new ErrorMetaDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorMetaDto(key string, value map[string]interface{}, msg string) *ErrorMetaDto {
	this := ErrorMetaDto{}
	this.Key = key
	this.Value = value
	this.Msg = msg
	return &this
}

// NewErrorMetaDtoWithDefaults instantiates a new ErrorMetaDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorMetaDtoWithDefaults() *ErrorMetaDto {
	this := ErrorMetaDto{}
	return &this
}

// GetKey returns the Key field value
func (o *ErrorMetaDto) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ErrorMetaDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ErrorMetaDto) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *ErrorMetaDto) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ErrorMetaDto) GetValueOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *ErrorMetaDto) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetMsg returns the Msg field value
func (o *ErrorMetaDto) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *ErrorMetaDto) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *ErrorMetaDto) SetMsg(v string) {
	o.Msg = v
}

func (o ErrorMetaDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["msg"] = o.Msg
	}
	return json.Marshal(toSerialize)
}

type NullableErrorMetaDto struct {
	value *ErrorMetaDto
	isSet bool
}

func (v NullableErrorMetaDto) Get() *ErrorMetaDto {
	return v.value
}

func (v *NullableErrorMetaDto) Set(val *ErrorMetaDto) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorMetaDto) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorMetaDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorMetaDto(val *ErrorMetaDto) *NullableErrorMetaDto {
	return &NullableErrorMetaDto{value: val, isSet: true}
}

func (v NullableErrorMetaDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorMetaDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


