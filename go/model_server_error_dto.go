/*
Integration

         Here can be some description if that needed     

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ServerErrorDto struct for ServerErrorDto
type ServerErrorDto struct {
	Message string `json:"message"`
	// Returns a date as a string value in ISO format.
	Timestamp string `json:"timestamp"`
	StatusCode float32 `json:"statusCode"`
	Code string `json:"code"`
}

// NewServerErrorDto instantiates a new ServerErrorDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerErrorDto(message string, timestamp string, statusCode float32, code string) *ServerErrorDto {
	this := ServerErrorDto{}
	this.Message = message
	this.Timestamp = timestamp
	this.StatusCode = statusCode
	this.Code = code
	return &this
}

// NewServerErrorDtoWithDefaults instantiates a new ServerErrorDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerErrorDtoWithDefaults() *ServerErrorDto {
	this := ServerErrorDto{}
	return &this
}

// GetMessage returns the Message field value
func (o *ServerErrorDto) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ServerErrorDto) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ServerErrorDto) SetMessage(v string) {
	o.Message = v
}

// GetTimestamp returns the Timestamp field value
func (o *ServerErrorDto) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ServerErrorDto) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ServerErrorDto) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetStatusCode returns the StatusCode field value
func (o *ServerErrorDto) GetStatusCode() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value
// and a boolean to check if the value has been set.
func (o *ServerErrorDto) GetStatusCodeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusCode, true
}

// SetStatusCode sets field value
func (o *ServerErrorDto) SetStatusCode(v float32) {
	o.StatusCode = v
}

// GetCode returns the Code field value
func (o *ServerErrorDto) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ServerErrorDto) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ServerErrorDto) SetCode(v string) {
	o.Code = v
}

func (o ServerErrorDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["statusCode"] = o.StatusCode
	}
	if true {
		toSerialize["code"] = o.Code
	}
	return json.Marshal(toSerialize)
}

type NullableServerErrorDto struct {
	value *ServerErrorDto
	isSet bool
}

func (v NullableServerErrorDto) Get() *ServerErrorDto {
	return v.value
}

func (v *NullableServerErrorDto) Set(val *ServerErrorDto) {
	v.value = val
	v.isSet = true
}

func (v NullableServerErrorDto) IsSet() bool {
	return v.isSet
}

func (v *NullableServerErrorDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerErrorDto(val *ServerErrorDto) *NullableServerErrorDto {
	return &NullableServerErrorDto{value: val, isSet: true}
}

func (v NullableServerErrorDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerErrorDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


