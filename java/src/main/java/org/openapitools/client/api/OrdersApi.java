/*
 * Integration
 *          Here can be some description if that needed     
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.OrderDto;
import org.openapitools.client.model.ReadOrder400Response;
import org.openapitools.client.model.ServerErrorDto;
import org.openapitools.client.model.UnauthorizedErrorDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listOrders
     * @param deliveryCity Stad (optional)
     * @param deliveryLineCountFrom  (optional)
     * @param deliveryLineCountTo  (optional)
     * @param deliveryName Mottagarnamn (optional)
     * @param documentNumber Dokumentnummer (optional)
     * @param dvolumeFrom Levererad volym från (optional)
     * @param dvolumeTo Levererad volym till (optional)
     * @param endDate Slutdatum (optional)
     * @param excludeAttached  (optional)
     * @param isCloseFilter  (optional)
     * @param isOpenFilter  (optional)
     * @param startDate Startdatum (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrdersCall(String deliveryCity, BigDecimal deliveryLineCountFrom, BigDecimal deliveryLineCountTo, String deliveryName, String documentNumber, BigDecimal dvolumeFrom, BigDecimal dvolumeTo, String endDate, Boolean excludeAttached, Boolean isCloseFilter, Boolean isOpenFilter, String startDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-ext/v1.0/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deliveryCity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deliveryCity", deliveryCity));
        }

        if (deliveryLineCountFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deliveryLineCountFrom", deliveryLineCountFrom));
        }

        if (deliveryLineCountTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deliveryLineCountTo", deliveryLineCountTo));
        }

        if (deliveryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deliveryName", deliveryName));
        }

        if (documentNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentNumber", documentNumber));
        }

        if (dvolumeFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dvolumeFrom", dvolumeFrom));
        }

        if (dvolumeTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dvolumeTo", dvolumeTo));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (excludeAttached != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeAttached", excludeAttached));
        }

        if (isCloseFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isCloseFilter", isCloseFilter));
        }

        if (isOpenFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isOpenFilter", isOpenFilter));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrdersValidateBeforeCall(String deliveryCity, BigDecimal deliveryLineCountFrom, BigDecimal deliveryLineCountTo, String deliveryName, String documentNumber, BigDecimal dvolumeFrom, BigDecimal dvolumeTo, String endDate, Boolean excludeAttached, Boolean isCloseFilter, Boolean isOpenFilter, String startDate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listOrdersCall(deliveryCity, deliveryLineCountFrom, deliveryLineCountTo, deliveryName, documentNumber, dvolumeFrom, dvolumeTo, endDate, excludeAttached, isCloseFilter, isOpenFilter, startDate, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param deliveryCity Stad (optional)
     * @param deliveryLineCountFrom  (optional)
     * @param deliveryLineCountTo  (optional)
     * @param deliveryName Mottagarnamn (optional)
     * @param documentNumber Dokumentnummer (optional)
     * @param dvolumeFrom Levererad volym från (optional)
     * @param dvolumeTo Levererad volym till (optional)
     * @param endDate Slutdatum (optional)
     * @param excludeAttached  (optional)
     * @param isCloseFilter  (optional)
     * @param isOpenFilter  (optional)
     * @param startDate Startdatum (optional)
     * @return List&lt;OrderDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<OrderDto> listOrders(String deliveryCity, BigDecimal deliveryLineCountFrom, BigDecimal deliveryLineCountTo, String deliveryName, String documentNumber, BigDecimal dvolumeFrom, BigDecimal dvolumeTo, String endDate, Boolean excludeAttached, Boolean isCloseFilter, Boolean isOpenFilter, String startDate) throws ApiException {
        ApiResponse<List<OrderDto>> localVarResp = listOrdersWithHttpInfo(deliveryCity, deliveryLineCountFrom, deliveryLineCountTo, deliveryName, documentNumber, dvolumeFrom, dvolumeTo, endDate, excludeAttached, isCloseFilter, isOpenFilter, startDate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deliveryCity Stad (optional)
     * @param deliveryLineCountFrom  (optional)
     * @param deliveryLineCountTo  (optional)
     * @param deliveryName Mottagarnamn (optional)
     * @param documentNumber Dokumentnummer (optional)
     * @param dvolumeFrom Levererad volym från (optional)
     * @param dvolumeTo Levererad volym till (optional)
     * @param endDate Slutdatum (optional)
     * @param excludeAttached  (optional)
     * @param isCloseFilter  (optional)
     * @param isOpenFilter  (optional)
     * @param startDate Startdatum (optional)
     * @return ApiResponse&lt;List&lt;OrderDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrderDto>> listOrdersWithHttpInfo(String deliveryCity, BigDecimal deliveryLineCountFrom, BigDecimal deliveryLineCountTo, String deliveryName, String documentNumber, BigDecimal dvolumeFrom, BigDecimal dvolumeTo, String endDate, Boolean excludeAttached, Boolean isCloseFilter, Boolean isOpenFilter, String startDate) throws ApiException {
        okhttp3.Call localVarCall = listOrdersValidateBeforeCall(deliveryCity, deliveryLineCountFrom, deliveryLineCountTo, deliveryName, documentNumber, dvolumeFrom, dvolumeTo, endDate, excludeAttached, isCloseFilter, isOpenFilter, startDate, null);
        Type localVarReturnType = new TypeToken<List<OrderDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deliveryCity Stad (optional)
     * @param deliveryLineCountFrom  (optional)
     * @param deliveryLineCountTo  (optional)
     * @param deliveryName Mottagarnamn (optional)
     * @param documentNumber Dokumentnummer (optional)
     * @param dvolumeFrom Levererad volym från (optional)
     * @param dvolumeTo Levererad volym till (optional)
     * @param endDate Slutdatum (optional)
     * @param excludeAttached  (optional)
     * @param isCloseFilter  (optional)
     * @param isOpenFilter  (optional)
     * @param startDate Startdatum (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrdersAsync(String deliveryCity, BigDecimal deliveryLineCountFrom, BigDecimal deliveryLineCountTo, String deliveryName, String documentNumber, BigDecimal dvolumeFrom, BigDecimal dvolumeTo, String endDate, Boolean excludeAttached, Boolean isCloseFilter, Boolean isOpenFilter, String startDate, final ApiCallback<List<OrderDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrdersValidateBeforeCall(deliveryCity, deliveryLineCountFrom, deliveryLineCountTo, deliveryName, documentNumber, dvolumeFrom, dvolumeTo, endDate, excludeAttached, isCloseFilter, isOpenFilter, startDate, _callback);
        Type localVarReturnType = new TypeToken<List<OrderDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readOrder
     * @param orderNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readOrderCall(String orderNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-ext/v1.0/orders/{orderNumber}"
            .replaceAll("\\{" + "orderNumber" + "\\}", localVarApiClient.escapeString(orderNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readOrderValidateBeforeCall(String orderNumber, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderNumber' is set
        if (orderNumber == null) {
            throw new ApiException("Missing the required parameter 'orderNumber' when calling readOrder(Async)");
        }
        

        okhttp3.Call localVarCall = readOrderCall(orderNumber, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param orderNumber  (required)
     * @return OrderDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OrderDto readOrder(String orderNumber) throws ApiException {
        ApiResponse<OrderDto> localVarResp = readOrderWithHttpInfo(orderNumber);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param orderNumber  (required)
     * @return ApiResponse&lt;OrderDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderDto> readOrderWithHttpInfo(String orderNumber) throws ApiException {
        okhttp3.Call localVarCall = readOrderValidateBeforeCall(orderNumber, null);
        Type localVarReturnType = new TypeToken<OrderDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readOrderAsync(String orderNumber, final ApiCallback<OrderDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = readOrderValidateBeforeCall(orderNumber, _callback);
        Type localVarReturnType = new TypeToken<OrderDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
