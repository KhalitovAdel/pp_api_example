/*
 * Integration
 *          Here can be some description if that needed     
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ErrorDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-18T22:23:53.783034Z[Etc/UTC]")
public class ErrorDto {
  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  /**
   * Gets or Sets statusCode
   */
  @JsonAdapter(StatusCodeEnum.Adapter.class)
  public enum StatusCodeEnum {
    NUMBER_400(new BigDecimal("400")),
    
    NUMBER_401(new BigDecimal("401")),
    
    NUMBER_404(new BigDecimal("404")),
    
    NUMBER_500(new BigDecimal("500"));

    private BigDecimal value;

    StatusCodeEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusCodeEnum fromValue(BigDecimal value) {
      for (StatusCodeEnum b : StatusCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusCodeEnum.fromValue(new BigDecimal(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private StatusCodeEnum statusCode;

  /**
   * Gets or Sets code
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    INTERNAL_ERROR("INTERNAL_ERROR"),
    
    INVALID_INPUT("INVALID_INPUT"),
    
    REQUEST_TIMEOUT("REQUEST_TIMEOUT"),
    
    INVALID_ID("INVALID_ID"),
    
    ACCESS_VIOLATION("ACCESS_VIOLATION"),
    
    NOT_NULL_EXPECTED("NOT_NULL_EXPECTED"),
    
    END_DATE_IS_BEFORE_START_DATE("END_DATE_IS_BEFORE_START_DATE"),
    
    VALUE_ALREADY_CHANGED("VALUE_ALREADY_CHANGED"),
    
    TOO_MANY_REQUESTS("TOO_MANY_REQUESTS"),
    
    NOT_AUTHORIZED("NOT_AUTHORIZED"),
    
    LANDFILL_NOT_FOUND("LANDFILL_NOT_FOUND"),
    
    LANDFILL_INVALID_RECEIVER_USER("LANDFILL_INVALID_RECEIVER_USER"),
    
    LANDFILL_CUSTOMER_REQUIRED("LANDFILL_CUSTOMER_REQUIRED"),
    
    INVALID_LAYER_TYPE_FOR_LANDFILL("INVALID_LAYER_TYPE_FOR_LANDFILL"),
    
    INVALID_SUBAREA_PRICE_CHANGE("INVALID_SUBAREA_PRICE_CHANGE"),
    
    ORDER_NOT_FOUND("ORDER_NOT_FOUND"),
    
    ORDER_ALREADY_ATTACHED("ORDER_ALREADY_ATTACHED"),
    
    ORDER_RECEIPTS_DIRECTORY_EXISTS("ORDER_RECEIPTS_DIRECTORY_EXISTS"),
    
    ORDER_RECEIPTS_DIRECTORY_RENAME_ERROR("ORDER_RECEIPTS_DIRECTORY_RENAME_ERROR"),
    
    ORDER_RECEIPTS_FILE_RENAME_ERROR("ORDER_RECEIPTS_FILE_RENAME_ERROR"),
    
    PROJECT_IS_NOT_AVAILABLE("PROJECT_IS_NOT_AVAILABLE"),
    
    DUMP_LOAD_NOT_FOUND("DUMP_LOAD_NOT_FOUND"),
    
    PROJECT_NAME_INVALID("PROJECT_NAME_INVALID"),
    
    PROJECT_NOT_FOUND("PROJECT_NOT_FOUND"),
    
    PROJECT_HAS_ORDER_WITH_OTHER_CUSTOMER("PROJECT_HAS_ORDER_WITH_OTHER_CUSTOMER"),
    
    PROJECT_HAS_CUSTOMER("PROJECT_HAS_CUSTOMER"),
    
    PROJECT_ACTIVE_LOCATION_CANNOT_BE_CHANGED("PROJECT_ACTIVE_LOCATION_CANNOT_BE_CHANGED"),
    
    PROJECT_CUSTOMER_REQUIRED("PROJECT_CUSTOMER_REQUIRED"),
    
    EMAIL_BLOCKED("EMAIL_BLOCKED"),
    
    DUMP_LOAD_STATUS_UNKNOWN("DUMP_LOAD_STATUS_UNKNOWN"),
    
    DUMP_LOAD_INVALID_TARGET_STATUS_OR_NO_PERMISSIONS("DUMP_LOAD_INVALID_TARGET_STATUS_OR_NO_PERMISSIONS"),
    
    DUMP_LOAD_NO_PERMISSIONS("DUMP_LOAD_NO_PERMISSIONS"),
    
    DUMP_LOAD_EDIT_FORBIDDEN_IN_CURRENT_STATUS("DUMP_LOAD_EDIT_FORBIDDEN_IN_CURRENT_STATUS"),
    
    DUMP_LOAD_FIELDS_HAVE_INVALID_VALUES("DUMP_LOAD_FIELDS_HAVE_INVALID_VALUES"),
    
    DUMP_LOAD_FIELDS_INVALID_CONDITIONS("DUMP_LOAD_FIELDS_INVALID_CONDITIONS"),
    
    DUMP_LOAD_NOT_SPECIFIED("DUMP_LOAD_NOT_SPECIFIED"),
    
    DUMP_LOAD_NOT_SIGNED("DUMP_LOAD_NOT_SIGNED"),
    
    DUMP_LOAD_NEED_TO_SEND("DUMP_LOAD_NEED_TO_SEND"),
    
    DUMP_LOAD_CUSTOMER_NEED_FOR_SIGN("DUMP_LOAD_CUSTOMER_NEED_FOR_SIGN"),
    
    DRIVER_EMAIL_EXISTS("DRIVER_EMAIL_EXISTS"),
    
    DRIVER_PHONE_EXISTS("DRIVER_PHONE_EXISTS"),
    
    CANNOT_SET_DATE_IN_PAST("CANNOT_SET_DATE_IN_PAST"),
    
    PROJECT_EDIT_FORBIDDEN_IN_CURRENT_STATUS("PROJECT_EDIT_FORBIDDEN_IN_CURRENT_STATUS"),
    
    USER_EXISTS("USER_EXISTS"),
    
    USER_NOT_FOUND("USER_NOT_FOUND"),
    
    USER_EMPTY_OLD_PASSWORD("USER_EMPTY_OLD_PASSWORD"),
    
    USER_INVALID_OLD_PASSWORD("USER_INVALID_OLD_PASSWORD"),
    
    USER_PASSWORD_NOT_EQUAL("USER_PASSWORD_NOT_EQUAL"),
    
    USER_PASSWORD_SIMILAR_TO_CURRENT("USER_PASSWORD_SIMILAR_TO_CURRENT"),
    
    USER_HAS_LINKED_PROJECTS("USER_HAS_LINKED_PROJECTS"),
    
    USER_REQUIRED_CUSTOMER("USER_REQUIRED_CUSTOMER"),
    
    USER_ALREADY_INVITED("USER_ALREADY_INVITED"),
    
    EMAIL_EXISTS("EMAIL_EXISTS"),
    
    DRIVER_EMPTY_PASSWORD("DRIVER_EMPTY_PASSWORD"),
    
    DRIVER_INVALID_OLD_PASSWORD("DRIVER_INVALID_OLD_PASSWORD"),
    
    DRIVER_PASSWORD_NOT_EQUAL("DRIVER_PASSWORD_NOT_EQUAL"),
    
    EMPTY_OWNER("EMPTY_OWNER"),
    
    DUMP_TYPE_EXISTS("DUMP_TYPE_EXISTS"),
    
    DUMP_TYPE_NAME_CANNOT_BE_EMPTY("DUMP_TYPE_NAME_CANNOT_BE_EMPTY"),
    
    DUMP_TYPE_VOLUME_CANNOT_BE_EMPTY("DUMP_TYPE_VOLUME_CANNOT_BE_EMPTY"),
    
    DUMP_TYPE_TONS_PER_M3_MUST_BE_POSITIVE("DUMP_TYPE_TONS_PER_M3_MUST_BE_POSITIVE"),
    
    TOXIC_LIMITS_INVALID_VALUE("TOXIC_LIMITS_INVALID_VALUE"),
    
    SUBSTANCE_IS_USED("SUBSTANCE_IS_USED"),
    
    SUBSTANCE_CONTAMINATION_TYPE_IS_USED("SUBSTANCE_CONTAMINATION_TYPE_IS_USED"),
    
    PERMISSION_ERROR("PERMISSION_ERROR"),
    
    DELIVERY_LINE_NOT_FOUND("DELIVERY_LINE_NOT_FOUND"),
    
    COMPANY_NOT_FOUND("COMPANY_NOT_FOUND"),
    
    NETWORK_ERROR("NETWORK_ERROR"),
    
    LANDFILL_STATUS_NOT_FOUND("LANDFILL_STATUS_NOT_FOUND"),
    
    LANDFILL_STATUS_NAME_CANNOT_BE_EMPTY("LANDFILL_STATUS_NAME_CANNOT_BE_EMPTY"),
    
    LANDFILL_STATUS_EXISTS("LANDFILL_STATUS_EXISTS"),
    
    LANDFILL_TYPE_CHANGE_NOT_ALLOWED("LANDFILL_TYPE_CHANGE_NOT_ALLOWED"),
    
    LANDFILL_IS_NOT_AVAILABLE("LANDFILL_IS_NOT_AVAILABLE"),
    
    FORTNOX_ENTITY_NOT_FOUND("FORTNOX_ENTITY_NOT_FOUND"),
    
    FORTNOX_SYNC_TIMEOUT("FORTNOX_SYNC_TIMEOUT"),
    
    FORTNOX_ANOTHER_SYNC_IN_PROGRESS("FORTNOX_ANOTHER_SYNC_IN_PROGRESS"),
    
    FORTNOX_NETWORK_ERROR("FORTNOX_NETWORK_ERROR"),
    
    FORTNOX_SYNC_CANCELED("FORTNOX_SYNC_CANCELED"),
    
    EMPTY_COMPANY("EMPTY_COMPANY"),
    
    NOT_IMPLEMENTED("NOT_IMPLEMENTED"),
    
    DEVIATION_NOT_FOUND("DEVIATION_NOT_FOUND"),
    
    DEVIATION_INVALID_FIELDS("DEVIATION_INVALID_FIELDS"),
    
    FILE_NOT_FOUND("FILE_NOT_FOUND"),
    
    FILE_EXISTS("FILE_EXISTS"),
    
    FILE_TOO_LARGE("FILE_TOO_LARGE"),
    
    INVALID_FILE_NAME("INVALID_FILE_NAME"),
    
    CONVERSION_TO_PDF_ERROR("CONVERSION_TO_PDF_ERROR"),
    
    PROJECT_END_DATE_BEFORE_START_DATE("PROJECT_END_DATE_BEFORE_START_DATE"),
    
    PROJECT_NO_DATE_CHANGE_ONGOING_MASS("PROJECT_NO_DATE_CHANGE_ONGOING_MASS"),
    
    PROJECT_START_DATE_AFTER_MASS_START_DATE("PROJECT_START_DATE_AFTER_MASS_START_DATE"),
    
    PROJECT_END_DATE_BEFORE_MASS_END_DATE("PROJECT_END_DATE_BEFORE_MASS_END_DATE"),
    
    MASS_START_DATE_BEFORE_PROJECT_START_DATE("MASS_START_DATE_BEFORE_PROJECT_START_DATE"),
    
    MASS_START_DATE_BEFORE_TODAY("MASS_START_DATE_BEFORE_TODAY"),
    
    MASS_END_DATE_BEFORE_PROJECT_START_DATE("MASS_END_DATE_BEFORE_PROJECT_START_DATE"),
    
    MASS_END_DATE_BEFORE_MASS_START_DATE("MASS_END_DATE_BEFORE_MASS_START_DATE"),
    
    MASS_END_DATE_BEFORE_TODAY("MASS_END_DATE_BEFORE_TODAY"),
    
    PROJECT_END_DATE_MUST_BE_UPDATED("PROJECT_END_DATE_MUST_BE_UPDATED"),
    
    PROJECT_LOCATION_ON_WATER("PROJECT_LOCATION_ON_WATER"),
    
    LANDFILL_LOCATION_ON_WATER("LANDFILL_LOCATION_ON_WATER"),
    
    OPEN_FROM_AFTER_OPEN_TO("OPEN_FROM_AFTER_OPEN_TO"),
    
    NO_OPEN_WORK_DAY("NO_OPEN_WORK_DAY"),
    
    API_KEY_NOT_SPECIFIED("API_KEY_NOT_SPECIFIED"),
    
    API_KEY_INVALID("API_KEY_INVALID"),
    
    INVALID_LOCATION("INVALID_LOCATION"),
    
    PHONE_NUMBER_EXISTS("PHONE_NUMBER_EXISTS"),
    
    PHONE_NUMBER_HAVE_TO_BE_LOCAL_OR_INTERNATIONAL("PHONE_NUMBER_HAVE_TO_BE_LOCAL_OR_INTERNATIONAL"),
    
    PHONE_NUMBER_TOO_SHORT("PHONE_NUMBER_TOO_SHORT"),
    
    PHONE_NUMBER_TOO_LONG("PHONE_NUMBER_TOO_LONG");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public ErrorDto() {
  }

  public ErrorDto message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public ErrorDto timestamp(String timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Returns a date as a string value in ISO format.
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Returns a date as a string value in ISO format.")

  public String getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public ErrorDto statusCode(StatusCodeEnum statusCode) {
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Get statusCode
   * @return statusCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StatusCodeEnum getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(StatusCodeEnum statusCode) {
    this.statusCode = statusCode;
  }


  public ErrorDto code(CodeEnum code) {
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CodeEnum getCode() {
    return code;
  }


  public void setCode(CodeEnum code) {
    this.code = code;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorDto errorDto = (ErrorDto) o;
    return Objects.equals(this.message, errorDto.message) &&
        Objects.equals(this.timestamp, errorDto.timestamp) &&
        Objects.equals(this.statusCode, errorDto.statusCode) &&
        Objects.equals(this.code, errorDto.code);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, timestamp, statusCode, code);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorDto {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("message");
    openapiFields.add("timestamp");
    openapiFields.add("statusCode");
    openapiFields.add("code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("statusCode");
    openapiRequiredFields.add("code");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ErrorDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ErrorDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErrorDto is not found in the empty JSON string", ErrorDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ErrorDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ErrorDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ErrorDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErrorDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErrorDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErrorDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErrorDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ErrorDto>() {
           @Override
           public void write(JsonWriter out, ErrorDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErrorDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ErrorDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ErrorDto
  * @throws IOException if the JSON string is invalid with respect to ErrorDto
  */
  public static ErrorDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErrorDto.class);
  }

 /**
  * Convert an instance of ErrorDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

