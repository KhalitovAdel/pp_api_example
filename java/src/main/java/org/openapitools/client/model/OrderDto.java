/*
 * Integration
 *          Here can be some description if that needed     
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrderDtoDeliveryAddress;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-18T22:23:53.783034Z[Etc/UTC]")
public class OrderDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Orderstatus
   */
  @JsonAdapter(OrderStatusEnum.Adapter.class)
  public enum OrderStatusEnum {
    CLOSED("CLOSED"),
    
    OPENED("OPENED");

    private String value;

    OrderStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderStatusEnum fromValue(String value) {
      for (OrderStatusEnum b : OrderStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORDER_STATUS = "orderStatus";
  @SerializedName(SERIALIZED_NAME_ORDER_STATUS)
  private OrderStatusEnum orderStatus;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_DELIVERY_ADDRESS = "deliveryAddress";
  @SerializedName(SERIALIZED_NAME_DELIVERY_ADDRESS)
  private OrderDtoDeliveryAddress deliveryAddress;

  /**
   * Synkronisering status
   */
  @JsonAdapter(LastSyncStatusEnum.Adapter.class)
  public enum LastSyncStatusEnum {
    ERROR("ERROR"),
    
    SUCCESS("SUCCESS"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    LastSyncStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LastSyncStatusEnum fromValue(String value) {
      for (LastSyncStatusEnum b : LastSyncStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LastSyncStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LastSyncStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LastSyncStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LastSyncStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LAST_SYNC_STATUS = "lastSyncStatus";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC_STATUS)
  private LastSyncStatusEnum lastSyncStatus;

  public static final String SERIALIZED_NAME_DELIVERED_VOLUME = "deliveredVolume";
  @SerializedName(SERIALIZED_NAME_DELIVERED_VOLUME)
  private BigDecimal deliveredVolume;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_LAST_SYNC_AT = "lastSyncAt";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC_AT)
  private OffsetDateTime lastSyncAt;

  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "documentNumber";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  private String documentNumber;

  public static final String SERIALIZED_NAME_PROJECT_NUMBER = "projectNumber";
  @SerializedName(SERIALIZED_NAME_PROJECT_NUMBER)
  private String projectNumber;

  public static final String SERIALIZED_NAME_SALES_RESPONSIBLE = "salesResponsible";
  @SerializedName(SERIALIZED_NAME_SALES_RESPONSIBLE)
  private String salesResponsible;

  public static final String SERIALIZED_NAME_ORDER_DATE = "orderDate";
  @SerializedName(SERIALIZED_NAME_ORDER_DATE)
  private String orderDate;

  public static final String SERIALIZED_NAME_DELIVERY_DATE = "deliveryDate";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DATE)
  private String deliveryDate;

  public static final String SERIALIZED_NAME_PLANNED_START_DATE = "plannedStartDate";
  @SerializedName(SERIALIZED_NAME_PLANNED_START_DATE)
  private String plannedStartDate;

  public static final String SERIALIZED_NAME_DELETED_AT = "deletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public static final String SERIALIZED_NAME_DELIVERY_NAME = "deliveryName";
  @SerializedName(SERIALIZED_NAME_DELIVERY_NAME)
  private String deliveryName;

  public static final String SERIALIZED_NAME_DELIVERY_LINE_COUNT = "deliveryLineCount";
  @SerializedName(SERIALIZED_NAME_DELIVERY_LINE_COUNT)
  private BigDecimal deliveryLineCount;

  public OrderDto() {
  }

  public OrderDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Ordernummer
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Ordernummer")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public OrderDto orderStatus(OrderStatusEnum orderStatus) {
    
    this.orderStatus = orderStatus;
    return this;
  }

   /**
   * Orderstatus
   * @return orderStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Orderstatus")

  public OrderStatusEnum getOrderStatus() {
    return orderStatus;
  }


  public void setOrderStatus(OrderStatusEnum orderStatus) {
    this.orderStatus = orderStatus;
  }


  public OrderDto customerId(String customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Kund
   * @return customerId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Kund")

  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public OrderDto deliveryAddress(OrderDtoDeliveryAddress deliveryAddress) {
    
    this.deliveryAddress = deliveryAddress;
    return this;
  }

   /**
   * Get deliveryAddress
   * @return deliveryAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OrderDtoDeliveryAddress getDeliveryAddress() {
    return deliveryAddress;
  }


  public void setDeliveryAddress(OrderDtoDeliveryAddress deliveryAddress) {
    this.deliveryAddress = deliveryAddress;
  }


  public OrderDto lastSyncStatus(LastSyncStatusEnum lastSyncStatus) {
    
    this.lastSyncStatus = lastSyncStatus;
    return this;
  }

   /**
   * Synkronisering status
   * @return lastSyncStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Synkronisering status")

  public LastSyncStatusEnum getLastSyncStatus() {
    return lastSyncStatus;
  }


  public void setLastSyncStatus(LastSyncStatusEnum lastSyncStatus) {
    this.lastSyncStatus = lastSyncStatus;
  }


  public OrderDto deliveredVolume(BigDecimal deliveredVolume) {
    
    this.deliveredVolume = deliveredVolume;
    return this;
  }

   /**
   * Levererad volym
   * @return deliveredVolume
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Levererad volym")

  public BigDecimal getDeliveredVolume() {
    return deliveredVolume;
  }


  public void setDeliveredVolume(BigDecimal deliveredVolume) {
    this.deliveredVolume = deliveredVolume;
  }


  public OrderDto createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Skapades
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Skapades")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public OrderDto updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Senast ändrad
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Senast ändrad")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public OrderDto lastSyncAt(OffsetDateTime lastSyncAt) {
    
    this.lastSyncAt = lastSyncAt;
    return this;
  }

   /**
   * Synkronisera
   * @return lastSyncAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Synkronisera")

  public OffsetDateTime getLastSyncAt() {
    return lastSyncAt;
  }


  public void setLastSyncAt(OffsetDateTime lastSyncAt) {
    this.lastSyncAt = lastSyncAt;
  }


  public OrderDto documentNumber(String documentNumber) {
    
    this.documentNumber = documentNumber;
    return this;
  }

   /**
   * Dokumentnummer
   * @return documentNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Dokumentnummer")

  public String getDocumentNumber() {
    return documentNumber;
  }


  public void setDocumentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
  }


  public OrderDto projectNumber(String projectNumber) {
    
    this.projectNumber = projectNumber;
    return this;
  }

   /**
   * Projektnummer
   * @return projectNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Projektnummer")

  public String getProjectNumber() {
    return projectNumber;
  }


  public void setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
  }


  public OrderDto salesResponsible(String salesResponsible) {
    
    this.salesResponsible = salesResponsible;
    return this;
  }

   /**
   * Ansvarig säljare
   * @return salesResponsible
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ansvarig säljare")

  public String getSalesResponsible() {
    return salesResponsible;
  }


  public void setSalesResponsible(String salesResponsible) {
    this.salesResponsible = salesResponsible;
  }


  public OrderDto orderDate(String orderDate) {
    
    this.orderDate = orderDate;
    return this;
  }

   /**
   * Orderdatum
   * @return orderDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Orderdatum")

  public String getOrderDate() {
    return orderDate;
  }


  public void setOrderDate(String orderDate) {
    this.orderDate = orderDate;
  }


  public OrderDto deliveryDate(String deliveryDate) {
    
    this.deliveryDate = deliveryDate;
    return this;
  }

   /**
   * Leveransdatum
   * @return deliveryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Leveransdatum")

  public String getDeliveryDate() {
    return deliveryDate;
  }


  public void setDeliveryDate(String deliveryDate) {
    this.deliveryDate = deliveryDate;
  }


  public OrderDto plannedStartDate(String plannedStartDate) {
    
    this.plannedStartDate = plannedStartDate;
    return this;
  }

   /**
   * Planerat Startdatum
   * @return plannedStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Planerat Startdatum")

  public String getPlannedStartDate() {
    return plannedStartDate;
  }


  public void setPlannedStartDate(String plannedStartDate) {
    this.plannedStartDate = plannedStartDate;
  }


  public OrderDto deletedAt(OffsetDateTime deletedAt) {
    
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * Get deletedAt
   * @return deletedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }


  public void setDeletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  public OrderDto updatedBy(String updatedBy) {
    
    this.updatedBy = updatedBy;
    return this;
  }

   /**
   * Get updatedBy
   * @return updatedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUpdatedBy() {
    return updatedBy;
  }


  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }


  public OrderDto deliveryName(String deliveryName) {
    
    this.deliveryName = deliveryName;
    return this;
  }

   /**
   * Mottagarnamn
   * @return deliveryName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mottagarnamn")

  public String getDeliveryName() {
    return deliveryName;
  }


  public void setDeliveryName(String deliveryName) {
    this.deliveryName = deliveryName;
  }


  public OrderDto deliveryLineCount(BigDecimal deliveryLineCount) {
    
    this.deliveryLineCount = deliveryLineCount;
    return this;
  }

   /**
   * Leveranser
   * @return deliveryLineCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Leveranser")

  public BigDecimal getDeliveryLineCount() {
    return deliveryLineCount;
  }


  public void setDeliveryLineCount(BigDecimal deliveryLineCount) {
    this.deliveryLineCount = deliveryLineCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderDto orderDto = (OrderDto) o;
    return Objects.equals(this.id, orderDto.id) &&
        Objects.equals(this.orderStatus, orderDto.orderStatus) &&
        Objects.equals(this.customerId, orderDto.customerId) &&
        Objects.equals(this.deliveryAddress, orderDto.deliveryAddress) &&
        Objects.equals(this.lastSyncStatus, orderDto.lastSyncStatus) &&
        Objects.equals(this.deliveredVolume, orderDto.deliveredVolume) &&
        Objects.equals(this.createdAt, orderDto.createdAt) &&
        Objects.equals(this.updatedAt, orderDto.updatedAt) &&
        Objects.equals(this.lastSyncAt, orderDto.lastSyncAt) &&
        Objects.equals(this.documentNumber, orderDto.documentNumber) &&
        Objects.equals(this.projectNumber, orderDto.projectNumber) &&
        Objects.equals(this.salesResponsible, orderDto.salesResponsible) &&
        Objects.equals(this.orderDate, orderDto.orderDate) &&
        Objects.equals(this.deliveryDate, orderDto.deliveryDate) &&
        Objects.equals(this.plannedStartDate, orderDto.plannedStartDate) &&
        Objects.equals(this.deletedAt, orderDto.deletedAt) &&
        Objects.equals(this.updatedBy, orderDto.updatedBy) &&
        Objects.equals(this.deliveryName, orderDto.deliveryName) &&
        Objects.equals(this.deliveryLineCount, orderDto.deliveryLineCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, orderStatus, customerId, deliveryAddress, lastSyncStatus, deliveredVolume, createdAt, updatedAt, lastSyncAt, documentNumber, projectNumber, salesResponsible, orderDate, deliveryDate, plannedStartDate, deletedAt, updatedBy, deliveryName, deliveryLineCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    orderStatus: ").append(toIndentedString(orderStatus)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    deliveryAddress: ").append(toIndentedString(deliveryAddress)).append("\n");
    sb.append("    lastSyncStatus: ").append(toIndentedString(lastSyncStatus)).append("\n");
    sb.append("    deliveredVolume: ").append(toIndentedString(deliveredVolume)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    lastSyncAt: ").append(toIndentedString(lastSyncAt)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    projectNumber: ").append(toIndentedString(projectNumber)).append("\n");
    sb.append("    salesResponsible: ").append(toIndentedString(salesResponsible)).append("\n");
    sb.append("    orderDate: ").append(toIndentedString(orderDate)).append("\n");
    sb.append("    deliveryDate: ").append(toIndentedString(deliveryDate)).append("\n");
    sb.append("    plannedStartDate: ").append(toIndentedString(plannedStartDate)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    deliveryName: ").append(toIndentedString(deliveryName)).append("\n");
    sb.append("    deliveryLineCount: ").append(toIndentedString(deliveryLineCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("orderStatus");
    openapiFields.add("customerId");
    openapiFields.add("deliveryAddress");
    openapiFields.add("lastSyncStatus");
    openapiFields.add("deliveredVolume");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("lastSyncAt");
    openapiFields.add("documentNumber");
    openapiFields.add("projectNumber");
    openapiFields.add("salesResponsible");
    openapiFields.add("orderDate");
    openapiFields.add("deliveryDate");
    openapiFields.add("plannedStartDate");
    openapiFields.add("deletedAt");
    openapiFields.add("updatedBy");
    openapiFields.add("deliveryName");
    openapiFields.add("deliveryLineCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("orderStatus");
    openapiRequiredFields.add("customerId");
    openapiRequiredFields.add("deliveryAddress");
    openapiRequiredFields.add("lastSyncStatus");
    openapiRequiredFields.add("deliveredVolume");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("lastSyncAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OrderDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderDto is not found in the empty JSON string", OrderDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("orderStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderStatus").toString()));
      }
      if (!jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      // validate the required field `deliveryAddress`
      OrderDtoDeliveryAddress.validateJsonObject(jsonObj.getAsJsonObject("deliveryAddress"));
      if (!jsonObj.get("lastSyncStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSyncStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSyncStatus").toString()));
      }
      if ((jsonObj.get("documentNumber") != null && !jsonObj.get("documentNumber").isJsonNull()) && !jsonObj.get("documentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentNumber").toString()));
      }
      if ((jsonObj.get("projectNumber") != null && !jsonObj.get("projectNumber").isJsonNull()) && !jsonObj.get("projectNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectNumber").toString()));
      }
      if ((jsonObj.get("salesResponsible") != null && !jsonObj.get("salesResponsible").isJsonNull()) && !jsonObj.get("salesResponsible").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesResponsible` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesResponsible").toString()));
      }
      if ((jsonObj.get("orderDate") != null && !jsonObj.get("orderDate").isJsonNull()) && !jsonObj.get("orderDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderDate").toString()));
      }
      if ((jsonObj.get("deliveryDate") != null && !jsonObj.get("deliveryDate").isJsonNull()) && !jsonObj.get("deliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryDate").toString()));
      }
      if ((jsonObj.get("plannedStartDate") != null && !jsonObj.get("plannedStartDate").isJsonNull()) && !jsonObj.get("plannedStartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plannedStartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plannedStartDate").toString()));
      }
      if ((jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) && !jsonObj.get("updatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedBy").toString()));
      }
      if ((jsonObj.get("deliveryName") != null && !jsonObj.get("deliveryName").isJsonNull()) && !jsonObj.get("deliveryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderDto.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderDto>() {
           @Override
           public void write(JsonWriter out, OrderDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderDto
  * @throws IOException if the JSON string is invalid with respect to OrderDto
  */
  public static OrderDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderDto.class);
  }

 /**
  * Convert an instance of OrderDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

