/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.OrderDto
import org.openapitools.client.models.ReadOrder400Response
import org.openapitools.client.models.ServerErrorDto
import org.openapitools.client.models.UnauthorizedErrorDto

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class OrdersApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:3000")
        }
    }

    /**
     * 
     * 
     * @param deliveryCity Stad (optional)
     * @param deliveryLineCountFrom  (optional)
     * @param deliveryLineCountTo  (optional)
     * @param deliveryName Mottagarnamn (optional)
     * @param documentNumber Dokumentnummer (optional)
     * @param dvolumeFrom Levererad volym från (optional)
     * @param dvolumeTo Levererad volym till (optional)
     * @param endDate Slutdatum (optional)
     * @param excludeAttached  (optional)
     * @param isCloseFilter  (optional)
     * @param isOpenFilter  (optional)
     * @param startDate Startdatum (optional)
     * @return kotlin.collections.List<OrderDto>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listOrders(deliveryCity: kotlin.String? = null, deliveryLineCountFrom: java.math.BigDecimal? = null, deliveryLineCountTo: java.math.BigDecimal? = null, deliveryName: kotlin.String? = null, documentNumber: kotlin.String? = null, dvolumeFrom: java.math.BigDecimal? = null, dvolumeTo: java.math.BigDecimal? = null, endDate: kotlin.String? = null, excludeAttached: kotlin.Boolean? = null, isCloseFilter: kotlin.Boolean? = null, isOpenFilter: kotlin.Boolean? = null, startDate: kotlin.String? = null) : kotlin.collections.List<OrderDto> {
        val localVarResponse = listOrdersWithHttpInfo(deliveryCity = deliveryCity, deliveryLineCountFrom = deliveryLineCountFrom, deliveryLineCountTo = deliveryLineCountTo, deliveryName = deliveryName, documentNumber = documentNumber, dvolumeFrom = dvolumeFrom, dvolumeTo = dvolumeTo, endDate = endDate, excludeAttached = excludeAttached, isCloseFilter = isCloseFilter, isOpenFilter = isOpenFilter, startDate = startDate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<OrderDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param deliveryCity Stad (optional)
     * @param deliveryLineCountFrom  (optional)
     * @param deliveryLineCountTo  (optional)
     * @param deliveryName Mottagarnamn (optional)
     * @param documentNumber Dokumentnummer (optional)
     * @param dvolumeFrom Levererad volym från (optional)
     * @param dvolumeTo Levererad volym till (optional)
     * @param endDate Slutdatum (optional)
     * @param excludeAttached  (optional)
     * @param isCloseFilter  (optional)
     * @param isOpenFilter  (optional)
     * @param startDate Startdatum (optional)
     * @return ApiResponse<kotlin.collections.List<OrderDto>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listOrdersWithHttpInfo(deliveryCity: kotlin.String?, deliveryLineCountFrom: java.math.BigDecimal?, deliveryLineCountTo: java.math.BigDecimal?, deliveryName: kotlin.String?, documentNumber: kotlin.String?, dvolumeFrom: java.math.BigDecimal?, dvolumeTo: java.math.BigDecimal?, endDate: kotlin.String?, excludeAttached: kotlin.Boolean?, isCloseFilter: kotlin.Boolean?, isOpenFilter: kotlin.Boolean?, startDate: kotlin.String?) : ApiResponse<kotlin.collections.List<OrderDto>?> {
        val localVariableConfig = listOrdersRequestConfig(deliveryCity = deliveryCity, deliveryLineCountFrom = deliveryLineCountFrom, deliveryLineCountTo = deliveryLineCountTo, deliveryName = deliveryName, documentNumber = documentNumber, dvolumeFrom = dvolumeFrom, dvolumeTo = dvolumeTo, endDate = endDate, excludeAttached = excludeAttached, isCloseFilter = isCloseFilter, isOpenFilter = isOpenFilter, startDate = startDate)

        return request<Unit, kotlin.collections.List<OrderDto>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listOrders
     *
     * @param deliveryCity Stad (optional)
     * @param deliveryLineCountFrom  (optional)
     * @param deliveryLineCountTo  (optional)
     * @param deliveryName Mottagarnamn (optional)
     * @param documentNumber Dokumentnummer (optional)
     * @param dvolumeFrom Levererad volym från (optional)
     * @param dvolumeTo Levererad volym till (optional)
     * @param endDate Slutdatum (optional)
     * @param excludeAttached  (optional)
     * @param isCloseFilter  (optional)
     * @param isOpenFilter  (optional)
     * @param startDate Startdatum (optional)
     * @return RequestConfig
     */
    fun listOrdersRequestConfig(deliveryCity: kotlin.String?, deliveryLineCountFrom: java.math.BigDecimal?, deliveryLineCountTo: java.math.BigDecimal?, deliveryName: kotlin.String?, documentNumber: kotlin.String?, dvolumeFrom: java.math.BigDecimal?, dvolumeTo: java.math.BigDecimal?, endDate: kotlin.String?, excludeAttached: kotlin.Boolean?, isCloseFilter: kotlin.Boolean?, isOpenFilter: kotlin.Boolean?, startDate: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (deliveryCity != null) {
                    put("deliveryCity", listOf(deliveryCity.toString()))
                }
                if (deliveryLineCountFrom != null) {
                    put("deliveryLineCountFrom", listOf(deliveryLineCountFrom.toString()))
                }
                if (deliveryLineCountTo != null) {
                    put("deliveryLineCountTo", listOf(deliveryLineCountTo.toString()))
                }
                if (deliveryName != null) {
                    put("deliveryName", listOf(deliveryName.toString()))
                }
                if (documentNumber != null) {
                    put("documentNumber", listOf(documentNumber.toString()))
                }
                if (dvolumeFrom != null) {
                    put("dvolumeFrom", listOf(dvolumeFrom.toString()))
                }
                if (dvolumeTo != null) {
                    put("dvolumeTo", listOf(dvolumeTo.toString()))
                }
                if (endDate != null) {
                    put("endDate", listOf(endDate.toString()))
                }
                if (excludeAttached != null) {
                    put("excludeAttached", listOf(excludeAttached.toString()))
                }
                if (isCloseFilter != null) {
                    put("isCloseFilter", listOf(isCloseFilter.toString()))
                }
                if (isOpenFilter != null) {
                    put("isOpenFilter", listOf(isOpenFilter.toString()))
                }
                if (startDate != null) {
                    put("startDate", listOf(startDate.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api-ext/v1.0/orders",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param orderNumber 
     * @return OrderDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun readOrder(orderNumber: kotlin.String) : OrderDto {
        val localVarResponse = readOrderWithHttpInfo(orderNumber = orderNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OrderDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param orderNumber 
     * @return ApiResponse<OrderDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun readOrderWithHttpInfo(orderNumber: kotlin.String) : ApiResponse<OrderDto?> {
        val localVariableConfig = readOrderRequestConfig(orderNumber = orderNumber)

        return request<Unit, OrderDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation readOrder
     *
     * @param orderNumber 
     * @return RequestConfig
     */
    fun readOrderRequestConfig(orderNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api-ext/v1.0/orders/{orderNumber}".replace("{"+"orderNumber"+"}", encodeURIComponent(orderNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
