<?php
/**
 * ErrorDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Integration
 *
 * Here can be some description if that needed
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ErrorDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ErrorDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ErrorDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'message' => 'string',
        'timestamp' => 'string',
        'status_code' => 'float',
        'code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'message' => null,
        'timestamp' => null,
        'status_code' => null,
        'code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'message' => false,
		'timestamp' => false,
		'status_code' => false,
		'code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message' => 'message',
        'timestamp' => 'timestamp',
        'status_code' => 'statusCode',
        'code' => 'code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message' => 'setMessage',
        'timestamp' => 'setTimestamp',
        'status_code' => 'setStatusCode',
        'code' => 'setCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message' => 'getMessage',
        'timestamp' => 'getTimestamp',
        'status_code' => 'getStatusCode',
        'code' => 'getCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_CODE_400 = 400;
    public const STATUS_CODE_401 = 401;
    public const STATUS_CODE_404 = 404;
    public const STATUS_CODE_500 = 500;
    public const CODE_INTERNAL_ERROR = 'INTERNAL_ERROR';
    public const CODE_INVALID_INPUT = 'INVALID_INPUT';
    public const CODE_REQUEST_TIMEOUT = 'REQUEST_TIMEOUT';
    public const CODE_INVALID_ID = 'INVALID_ID';
    public const CODE_ACCESS_VIOLATION = 'ACCESS_VIOLATION';
    public const CODE_NOT_NULL_EXPECTED = 'NOT_NULL_EXPECTED';
    public const CODE_END_DATE_IS_BEFORE_START_DATE = 'END_DATE_IS_BEFORE_START_DATE';
    public const CODE_VALUE_ALREADY_CHANGED = 'VALUE_ALREADY_CHANGED';
    public const CODE_TOO_MANY_REQUESTS = 'TOO_MANY_REQUESTS';
    public const CODE_NOT_AUTHORIZED = 'NOT_AUTHORIZED';
    public const CODE_LANDFILL_NOT_FOUND = 'LANDFILL_NOT_FOUND';
    public const CODE_LANDFILL_INVALID_RECEIVER_USER = 'LANDFILL_INVALID_RECEIVER_USER';
    public const CODE_LANDFILL_CUSTOMER_REQUIRED = 'LANDFILL_CUSTOMER_REQUIRED';
    public const CODE_INVALID_LAYER_TYPE_FOR_LANDFILL = 'INVALID_LAYER_TYPE_FOR_LANDFILL';
    public const CODE_INVALID_SUBAREA_PRICE_CHANGE = 'INVALID_SUBAREA_PRICE_CHANGE';
    public const CODE_ORDER_NOT_FOUND = 'ORDER_NOT_FOUND';
    public const CODE_ORDER_ALREADY_ATTACHED = 'ORDER_ALREADY_ATTACHED';
    public const CODE_ORDER_RECEIPTS_DIRECTORY_EXISTS = 'ORDER_RECEIPTS_DIRECTORY_EXISTS';
    public const CODE_ORDER_RECEIPTS_DIRECTORY_RENAME_ERROR = 'ORDER_RECEIPTS_DIRECTORY_RENAME_ERROR';
    public const CODE_ORDER_RECEIPTS_FILE_RENAME_ERROR = 'ORDER_RECEIPTS_FILE_RENAME_ERROR';
    public const CODE_PROJECT_IS_NOT_AVAILABLE = 'PROJECT_IS_NOT_AVAILABLE';
    public const CODE_DUMP_LOAD_NOT_FOUND = 'DUMP_LOAD_NOT_FOUND';
    public const CODE_PROJECT_NAME_INVALID = 'PROJECT_NAME_INVALID';
    public const CODE_PROJECT_NOT_FOUND = 'PROJECT_NOT_FOUND';
    public const CODE_PROJECT_HAS_ORDER_WITH_OTHER_CUSTOMER = 'PROJECT_HAS_ORDER_WITH_OTHER_CUSTOMER';
    public const CODE_PROJECT_HAS_CUSTOMER = 'PROJECT_HAS_CUSTOMER';
    public const CODE_PROJECT_ACTIVE_LOCATION_CANNOT_BE_CHANGED = 'PROJECT_ACTIVE_LOCATION_CANNOT_BE_CHANGED';
    public const CODE_PROJECT_CUSTOMER_REQUIRED = 'PROJECT_CUSTOMER_REQUIRED';
    public const CODE_EMAIL_BLOCKED = 'EMAIL_BLOCKED';
    public const CODE_DUMP_LOAD_STATUS_UNKNOWN = 'DUMP_LOAD_STATUS_UNKNOWN';
    public const CODE_DUMP_LOAD_INVALID_TARGET_STATUS_OR_NO_PERMISSIONS = 'DUMP_LOAD_INVALID_TARGET_STATUS_OR_NO_PERMISSIONS';
    public const CODE_DUMP_LOAD_NO_PERMISSIONS = 'DUMP_LOAD_NO_PERMISSIONS';
    public const CODE_DUMP_LOAD_EDIT_FORBIDDEN_IN_CURRENT_STATUS = 'DUMP_LOAD_EDIT_FORBIDDEN_IN_CURRENT_STATUS';
    public const CODE_DUMP_LOAD_FIELDS_HAVE_INVALID_VALUES = 'DUMP_LOAD_FIELDS_HAVE_INVALID_VALUES';
    public const CODE_DUMP_LOAD_FIELDS_INVALID_CONDITIONS = 'DUMP_LOAD_FIELDS_INVALID_CONDITIONS';
    public const CODE_DUMP_LOAD_NOT_SPECIFIED = 'DUMP_LOAD_NOT_SPECIFIED';
    public const CODE_DUMP_LOAD_NOT_SIGNED = 'DUMP_LOAD_NOT_SIGNED';
    public const CODE_DUMP_LOAD_NEED_TO_SEND = 'DUMP_LOAD_NEED_TO_SEND';
    public const CODE_DUMP_LOAD_CUSTOMER_NEED_FOR_SIGN = 'DUMP_LOAD_CUSTOMER_NEED_FOR_SIGN';
    public const CODE_DRIVER_EMAIL_EXISTS = 'DRIVER_EMAIL_EXISTS';
    public const CODE_DRIVER_PHONE_EXISTS = 'DRIVER_PHONE_EXISTS';
    public const CODE_CANNOT_SET_DATE_IN_PAST = 'CANNOT_SET_DATE_IN_PAST';
    public const CODE_PROJECT_EDIT_FORBIDDEN_IN_CURRENT_STATUS = 'PROJECT_EDIT_FORBIDDEN_IN_CURRENT_STATUS';
    public const CODE_USER_EXISTS = 'USER_EXISTS';
    public const CODE_USER_NOT_FOUND = 'USER_NOT_FOUND';
    public const CODE_USER_EMPTY_OLD_PASSWORD = 'USER_EMPTY_OLD_PASSWORD';
    public const CODE_USER_INVALID_OLD_PASSWORD = 'USER_INVALID_OLD_PASSWORD';
    public const CODE_USER_PASSWORD_NOT_EQUAL = 'USER_PASSWORD_NOT_EQUAL';
    public const CODE_USER_PASSWORD_SIMILAR_TO_CURRENT = 'USER_PASSWORD_SIMILAR_TO_CURRENT';
    public const CODE_USER_HAS_LINKED_PROJECTS = 'USER_HAS_LINKED_PROJECTS';
    public const CODE_USER_REQUIRED_CUSTOMER = 'USER_REQUIRED_CUSTOMER';
    public const CODE_USER_ALREADY_INVITED = 'USER_ALREADY_INVITED';
    public const CODE_EMAIL_EXISTS = 'EMAIL_EXISTS';
    public const CODE_DRIVER_EMPTY_PASSWORD = 'DRIVER_EMPTY_PASSWORD';
    public const CODE_DRIVER_INVALID_OLD_PASSWORD = 'DRIVER_INVALID_OLD_PASSWORD';
    public const CODE_DRIVER_PASSWORD_NOT_EQUAL = 'DRIVER_PASSWORD_NOT_EQUAL';
    public const CODE_EMPTY_OWNER = 'EMPTY_OWNER';
    public const CODE_DUMP_TYPE_EXISTS = 'DUMP_TYPE_EXISTS';
    public const CODE_DUMP_TYPE_NAME_CANNOT_BE_EMPTY = 'DUMP_TYPE_NAME_CANNOT_BE_EMPTY';
    public const CODE_DUMP_TYPE_VOLUME_CANNOT_BE_EMPTY = 'DUMP_TYPE_VOLUME_CANNOT_BE_EMPTY';
    public const CODE_DUMP_TYPE_TONS_PER_M3_MUST_BE_POSITIVE = 'DUMP_TYPE_TONS_PER_M3_MUST_BE_POSITIVE';
    public const CODE_TOXIC_LIMITS_INVALID_VALUE = 'TOXIC_LIMITS_INVALID_VALUE';
    public const CODE_SUBSTANCE_IS_USED = 'SUBSTANCE_IS_USED';
    public const CODE_SUBSTANCE_CONTAMINATION_TYPE_IS_USED = 'SUBSTANCE_CONTAMINATION_TYPE_IS_USED';
    public const CODE_PERMISSION_ERROR = 'PERMISSION_ERROR';
    public const CODE_DELIVERY_LINE_NOT_FOUND = 'DELIVERY_LINE_NOT_FOUND';
    public const CODE_COMPANY_NOT_FOUND = 'COMPANY_NOT_FOUND';
    public const CODE_NETWORK_ERROR = 'NETWORK_ERROR';
    public const CODE_LANDFILL_STATUS_NOT_FOUND = 'LANDFILL_STATUS_NOT_FOUND';
    public const CODE_LANDFILL_STATUS_NAME_CANNOT_BE_EMPTY = 'LANDFILL_STATUS_NAME_CANNOT_BE_EMPTY';
    public const CODE_LANDFILL_STATUS_EXISTS = 'LANDFILL_STATUS_EXISTS';
    public const CODE_LANDFILL_TYPE_CHANGE_NOT_ALLOWED = 'LANDFILL_TYPE_CHANGE_NOT_ALLOWED';
    public const CODE_LANDFILL_IS_NOT_AVAILABLE = 'LANDFILL_IS_NOT_AVAILABLE';
    public const CODE_FORTNOX_ENTITY_NOT_FOUND = 'FORTNOX_ENTITY_NOT_FOUND';
    public const CODE_FORTNOX_SYNC_TIMEOUT = 'FORTNOX_SYNC_TIMEOUT';
    public const CODE_FORTNOX_ANOTHER_SYNC_IN_PROGRESS = 'FORTNOX_ANOTHER_SYNC_IN_PROGRESS';
    public const CODE_FORTNOX_NETWORK_ERROR = 'FORTNOX_NETWORK_ERROR';
    public const CODE_FORTNOX_SYNC_CANCELED = 'FORTNOX_SYNC_CANCELED';
    public const CODE_EMPTY_COMPANY = 'EMPTY_COMPANY';
    public const CODE_NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';
    public const CODE_DEVIATION_NOT_FOUND = 'DEVIATION_NOT_FOUND';
    public const CODE_DEVIATION_INVALID_FIELDS = 'DEVIATION_INVALID_FIELDS';
    public const CODE_FILE_NOT_FOUND = 'FILE_NOT_FOUND';
    public const CODE_FILE_EXISTS = 'FILE_EXISTS';
    public const CODE_FILE_TOO_LARGE = 'FILE_TOO_LARGE';
    public const CODE_INVALID_FILE_NAME = 'INVALID_FILE_NAME';
    public const CODE_CONVERSION_TO_PDF_ERROR = 'CONVERSION_TO_PDF_ERROR';
    public const CODE_PROJECT_END_DATE_BEFORE_START_DATE = 'PROJECT_END_DATE_BEFORE_START_DATE';
    public const CODE_PROJECT_NO_DATE_CHANGE_ONGOING_MASS = 'PROJECT_NO_DATE_CHANGE_ONGOING_MASS';
    public const CODE_PROJECT_START_DATE_AFTER_MASS_START_DATE = 'PROJECT_START_DATE_AFTER_MASS_START_DATE';
    public const CODE_PROJECT_END_DATE_BEFORE_MASS_END_DATE = 'PROJECT_END_DATE_BEFORE_MASS_END_DATE';
    public const CODE_MASS_START_DATE_BEFORE_PROJECT_START_DATE = 'MASS_START_DATE_BEFORE_PROJECT_START_DATE';
    public const CODE_MASS_START_DATE_BEFORE_TODAY = 'MASS_START_DATE_BEFORE_TODAY';
    public const CODE_MASS_END_DATE_BEFORE_PROJECT_START_DATE = 'MASS_END_DATE_BEFORE_PROJECT_START_DATE';
    public const CODE_MASS_END_DATE_BEFORE_MASS_START_DATE = 'MASS_END_DATE_BEFORE_MASS_START_DATE';
    public const CODE_MASS_END_DATE_BEFORE_TODAY = 'MASS_END_DATE_BEFORE_TODAY';
    public const CODE_PROJECT_END_DATE_MUST_BE_UPDATED = 'PROJECT_END_DATE_MUST_BE_UPDATED';
    public const CODE_PROJECT_LOCATION_ON_WATER = 'PROJECT_LOCATION_ON_WATER';
    public const CODE_LANDFILL_LOCATION_ON_WATER = 'LANDFILL_LOCATION_ON_WATER';
    public const CODE_OPEN_FROM_AFTER_OPEN_TO = 'OPEN_FROM_AFTER_OPEN_TO';
    public const CODE_NO_OPEN_WORK_DAY = 'NO_OPEN_WORK_DAY';
    public const CODE_API_KEY_NOT_SPECIFIED = 'API_KEY_NOT_SPECIFIED';
    public const CODE_API_KEY_INVALID = 'API_KEY_INVALID';
    public const CODE_INVALID_LOCATION = 'INVALID_LOCATION';
    public const CODE_PHONE_NUMBER_EXISTS = 'PHONE_NUMBER_EXISTS';
    public const CODE_PHONE_NUMBER_HAVE_TO_BE_LOCAL_OR_INTERNATIONAL = 'PHONE_NUMBER_HAVE_TO_BE_LOCAL_OR_INTERNATIONAL';
    public const CODE_PHONE_NUMBER_TOO_SHORT = 'PHONE_NUMBER_TOO_SHORT';
    public const CODE_PHONE_NUMBER_TOO_LONG = 'PHONE_NUMBER_TOO_LONG';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusCodeAllowableValues()
    {
        return [
            self::STATUS_CODE_400,
            self::STATUS_CODE_401,
            self::STATUS_CODE_404,
            self::STATUS_CODE_500,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_INTERNAL_ERROR,
            self::CODE_INVALID_INPUT,
            self::CODE_REQUEST_TIMEOUT,
            self::CODE_INVALID_ID,
            self::CODE_ACCESS_VIOLATION,
            self::CODE_NOT_NULL_EXPECTED,
            self::CODE_END_DATE_IS_BEFORE_START_DATE,
            self::CODE_VALUE_ALREADY_CHANGED,
            self::CODE_TOO_MANY_REQUESTS,
            self::CODE_NOT_AUTHORIZED,
            self::CODE_LANDFILL_NOT_FOUND,
            self::CODE_LANDFILL_INVALID_RECEIVER_USER,
            self::CODE_LANDFILL_CUSTOMER_REQUIRED,
            self::CODE_INVALID_LAYER_TYPE_FOR_LANDFILL,
            self::CODE_INVALID_SUBAREA_PRICE_CHANGE,
            self::CODE_ORDER_NOT_FOUND,
            self::CODE_ORDER_ALREADY_ATTACHED,
            self::CODE_ORDER_RECEIPTS_DIRECTORY_EXISTS,
            self::CODE_ORDER_RECEIPTS_DIRECTORY_RENAME_ERROR,
            self::CODE_ORDER_RECEIPTS_FILE_RENAME_ERROR,
            self::CODE_PROJECT_IS_NOT_AVAILABLE,
            self::CODE_DUMP_LOAD_NOT_FOUND,
            self::CODE_PROJECT_NAME_INVALID,
            self::CODE_PROJECT_NOT_FOUND,
            self::CODE_PROJECT_HAS_ORDER_WITH_OTHER_CUSTOMER,
            self::CODE_PROJECT_HAS_CUSTOMER,
            self::CODE_PROJECT_ACTIVE_LOCATION_CANNOT_BE_CHANGED,
            self::CODE_PROJECT_CUSTOMER_REQUIRED,
            self::CODE_EMAIL_BLOCKED,
            self::CODE_DUMP_LOAD_STATUS_UNKNOWN,
            self::CODE_DUMP_LOAD_INVALID_TARGET_STATUS_OR_NO_PERMISSIONS,
            self::CODE_DUMP_LOAD_NO_PERMISSIONS,
            self::CODE_DUMP_LOAD_EDIT_FORBIDDEN_IN_CURRENT_STATUS,
            self::CODE_DUMP_LOAD_FIELDS_HAVE_INVALID_VALUES,
            self::CODE_DUMP_LOAD_FIELDS_INVALID_CONDITIONS,
            self::CODE_DUMP_LOAD_NOT_SPECIFIED,
            self::CODE_DUMP_LOAD_NOT_SIGNED,
            self::CODE_DUMP_LOAD_NEED_TO_SEND,
            self::CODE_DUMP_LOAD_CUSTOMER_NEED_FOR_SIGN,
            self::CODE_DRIVER_EMAIL_EXISTS,
            self::CODE_DRIVER_PHONE_EXISTS,
            self::CODE_CANNOT_SET_DATE_IN_PAST,
            self::CODE_PROJECT_EDIT_FORBIDDEN_IN_CURRENT_STATUS,
            self::CODE_USER_EXISTS,
            self::CODE_USER_NOT_FOUND,
            self::CODE_USER_EMPTY_OLD_PASSWORD,
            self::CODE_USER_INVALID_OLD_PASSWORD,
            self::CODE_USER_PASSWORD_NOT_EQUAL,
            self::CODE_USER_PASSWORD_SIMILAR_TO_CURRENT,
            self::CODE_USER_HAS_LINKED_PROJECTS,
            self::CODE_USER_REQUIRED_CUSTOMER,
            self::CODE_USER_ALREADY_INVITED,
            self::CODE_EMAIL_EXISTS,
            self::CODE_DRIVER_EMPTY_PASSWORD,
            self::CODE_DRIVER_INVALID_OLD_PASSWORD,
            self::CODE_DRIVER_PASSWORD_NOT_EQUAL,
            self::CODE_EMPTY_OWNER,
            self::CODE_DUMP_TYPE_EXISTS,
            self::CODE_DUMP_TYPE_NAME_CANNOT_BE_EMPTY,
            self::CODE_DUMP_TYPE_VOLUME_CANNOT_BE_EMPTY,
            self::CODE_DUMP_TYPE_TONS_PER_M3_MUST_BE_POSITIVE,
            self::CODE_TOXIC_LIMITS_INVALID_VALUE,
            self::CODE_SUBSTANCE_IS_USED,
            self::CODE_SUBSTANCE_CONTAMINATION_TYPE_IS_USED,
            self::CODE_PERMISSION_ERROR,
            self::CODE_DELIVERY_LINE_NOT_FOUND,
            self::CODE_COMPANY_NOT_FOUND,
            self::CODE_NETWORK_ERROR,
            self::CODE_LANDFILL_STATUS_NOT_FOUND,
            self::CODE_LANDFILL_STATUS_NAME_CANNOT_BE_EMPTY,
            self::CODE_LANDFILL_STATUS_EXISTS,
            self::CODE_LANDFILL_TYPE_CHANGE_NOT_ALLOWED,
            self::CODE_LANDFILL_IS_NOT_AVAILABLE,
            self::CODE_FORTNOX_ENTITY_NOT_FOUND,
            self::CODE_FORTNOX_SYNC_TIMEOUT,
            self::CODE_FORTNOX_ANOTHER_SYNC_IN_PROGRESS,
            self::CODE_FORTNOX_NETWORK_ERROR,
            self::CODE_FORTNOX_SYNC_CANCELED,
            self::CODE_EMPTY_COMPANY,
            self::CODE_NOT_IMPLEMENTED,
            self::CODE_DEVIATION_NOT_FOUND,
            self::CODE_DEVIATION_INVALID_FIELDS,
            self::CODE_FILE_NOT_FOUND,
            self::CODE_FILE_EXISTS,
            self::CODE_FILE_TOO_LARGE,
            self::CODE_INVALID_FILE_NAME,
            self::CODE_CONVERSION_TO_PDF_ERROR,
            self::CODE_PROJECT_END_DATE_BEFORE_START_DATE,
            self::CODE_PROJECT_NO_DATE_CHANGE_ONGOING_MASS,
            self::CODE_PROJECT_START_DATE_AFTER_MASS_START_DATE,
            self::CODE_PROJECT_END_DATE_BEFORE_MASS_END_DATE,
            self::CODE_MASS_START_DATE_BEFORE_PROJECT_START_DATE,
            self::CODE_MASS_START_DATE_BEFORE_TODAY,
            self::CODE_MASS_END_DATE_BEFORE_PROJECT_START_DATE,
            self::CODE_MASS_END_DATE_BEFORE_MASS_START_DATE,
            self::CODE_MASS_END_DATE_BEFORE_TODAY,
            self::CODE_PROJECT_END_DATE_MUST_BE_UPDATED,
            self::CODE_PROJECT_LOCATION_ON_WATER,
            self::CODE_LANDFILL_LOCATION_ON_WATER,
            self::CODE_OPEN_FROM_AFTER_OPEN_TO,
            self::CODE_NO_OPEN_WORK_DAY,
            self::CODE_API_KEY_NOT_SPECIFIED,
            self::CODE_API_KEY_INVALID,
            self::CODE_INVALID_LOCATION,
            self::CODE_PHONE_NUMBER_EXISTS,
            self::CODE_PHONE_NUMBER_HAVE_TO_BE_LOCAL_OR_INTERNATIONAL,
            self::CODE_PHONE_NUMBER_TOO_SHORT,
            self::CODE_PHONE_NUMBER_TOO_LONG,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('status_code', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['status_code'] === null) {
            $invalidProperties[] = "'status_code' can't be null";
        }
        $allowedValues = $this->getStatusCodeAllowableValues();
        if (!is_null($this->container['status_code']) && !in_array($this->container['status_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status_code', must be one of '%s'",
                $this->container['status_code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'code', must be one of '%s'",
                $this->container['code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return self
     */
    public function setMessage($message)
    {

        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }

        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp Returns a date as a string value in ISO format.
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {

        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }

        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return float
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param float $status_code status_code
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        $allowedValues = $this->getStatusCodeAllowableValues();
        if (!in_array($status_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status_code', must be one of '%s'",
                    $status_code,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($status_code)) {
            throw new \InvalidArgumentException('non-nullable status_code cannot be null');
        }

        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'code', must be one of '%s'",
                    $code,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }

        $this->container['code'] = $code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


