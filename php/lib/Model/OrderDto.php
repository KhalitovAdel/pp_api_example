<?php
/**
 * OrderDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Integration
 *
 * Here can be some description if that needed
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'order_status' => 'string',
        'customer_id' => 'string',
        'delivery_address' => '\OpenAPI\Client\Model\OrderDtoDeliveryAddress',
        'last_sync_status' => 'string',
        'delivered_volume' => 'float',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'last_sync_at' => '\DateTime',
        'document_number' => 'string',
        'project_number' => 'string',
        'sales_responsible' => 'string',
        'order_date' => 'string',
        'delivery_date' => 'string',
        'planned_start_date' => 'string',
        'deleted_at' => '\DateTime',
        'updated_by' => 'string',
        'delivery_name' => 'string',
        'delivery_line_count' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'order_status' => null,
        'customer_id' => null,
        'delivery_address' => null,
        'last_sync_status' => null,
        'delivered_volume' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'last_sync_at' => 'date-time',
        'document_number' => null,
        'project_number' => null,
        'sales_responsible' => null,
        'order_date' => null,
        'delivery_date' => null,
        'planned_start_date' => null,
        'deleted_at' => 'date-time',
        'updated_by' => null,
        'delivery_name' => null,
        'delivery_line_count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'order_status' => false,
		'customer_id' => false,
		'delivery_address' => false,
		'last_sync_status' => false,
		'delivered_volume' => false,
		'created_at' => false,
		'updated_at' => false,
		'last_sync_at' => true,
		'document_number' => true,
		'project_number' => true,
		'sales_responsible' => true,
		'order_date' => true,
		'delivery_date' => true,
		'planned_start_date' => true,
		'deleted_at' => true,
		'updated_by' => true,
		'delivery_name' => true,
		'delivery_line_count' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'order_status' => 'orderStatus',
        'customer_id' => 'customerId',
        'delivery_address' => 'deliveryAddress',
        'last_sync_status' => 'lastSyncStatus',
        'delivered_volume' => 'deliveredVolume',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'last_sync_at' => 'lastSyncAt',
        'document_number' => 'documentNumber',
        'project_number' => 'projectNumber',
        'sales_responsible' => 'salesResponsible',
        'order_date' => 'orderDate',
        'delivery_date' => 'deliveryDate',
        'planned_start_date' => 'plannedStartDate',
        'deleted_at' => 'deletedAt',
        'updated_by' => 'updatedBy',
        'delivery_name' => 'deliveryName',
        'delivery_line_count' => 'deliveryLineCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'order_status' => 'setOrderStatus',
        'customer_id' => 'setCustomerId',
        'delivery_address' => 'setDeliveryAddress',
        'last_sync_status' => 'setLastSyncStatus',
        'delivered_volume' => 'setDeliveredVolume',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'last_sync_at' => 'setLastSyncAt',
        'document_number' => 'setDocumentNumber',
        'project_number' => 'setProjectNumber',
        'sales_responsible' => 'setSalesResponsible',
        'order_date' => 'setOrderDate',
        'delivery_date' => 'setDeliveryDate',
        'planned_start_date' => 'setPlannedStartDate',
        'deleted_at' => 'setDeletedAt',
        'updated_by' => 'setUpdatedBy',
        'delivery_name' => 'setDeliveryName',
        'delivery_line_count' => 'setDeliveryLineCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'order_status' => 'getOrderStatus',
        'customer_id' => 'getCustomerId',
        'delivery_address' => 'getDeliveryAddress',
        'last_sync_status' => 'getLastSyncStatus',
        'delivered_volume' => 'getDeliveredVolume',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'last_sync_at' => 'getLastSyncAt',
        'document_number' => 'getDocumentNumber',
        'project_number' => 'getProjectNumber',
        'sales_responsible' => 'getSalesResponsible',
        'order_date' => 'getOrderDate',
        'delivery_date' => 'getDeliveryDate',
        'planned_start_date' => 'getPlannedStartDate',
        'deleted_at' => 'getDeletedAt',
        'updated_by' => 'getUpdatedBy',
        'delivery_name' => 'getDeliveryName',
        'delivery_line_count' => 'getDeliveryLineCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ORDER_STATUS_CLOSED = 'CLOSED';
    public const ORDER_STATUS_OPENED = 'OPENED';
    public const LAST_SYNC_STATUS_ERROR = 'ERROR';
    public const LAST_SYNC_STATUS_SUCCESS = 'SUCCESS';
    public const LAST_SYNC_STATUS_UNKNOWN = 'UNKNOWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderStatusAllowableValues()
    {
        return [
            self::ORDER_STATUS_CLOSED,
            self::ORDER_STATUS_OPENED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLastSyncStatusAllowableValues()
    {
        return [
            self::LAST_SYNC_STATUS_ERROR,
            self::LAST_SYNC_STATUS_SUCCESS,
            self::LAST_SYNC_STATUS_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('delivery_address', $data ?? [], null);
        $this->setIfExists('last_sync_status', $data ?? [], null);
        $this->setIfExists('delivered_volume', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('last_sync_at', $data ?? [], null);
        $this->setIfExists('document_number', $data ?? [], null);
        $this->setIfExists('project_number', $data ?? [], null);
        $this->setIfExists('sales_responsible', $data ?? [], null);
        $this->setIfExists('order_date', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('planned_start_date', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
        $this->setIfExists('delivery_name', $data ?? [], null);
        $this->setIfExists('delivery_line_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['order_status'] === null) {
            $invalidProperties[] = "'order_status' can't be null";
        }
        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!is_null($this->container['order_status']) && !in_array($this->container['order_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_status', must be one of '%s'",
                $this->container['order_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['delivery_address'] === null) {
            $invalidProperties[] = "'delivery_address' can't be null";
        }
        if ($this->container['last_sync_status'] === null) {
            $invalidProperties[] = "'last_sync_status' can't be null";
        }
        $allowedValues = $this->getLastSyncStatusAllowableValues();
        if (!is_null($this->container['last_sync_status']) && !in_array($this->container['last_sync_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'last_sync_status', must be one of '%s'",
                $this->container['last_sync_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['delivered_volume'] === null) {
            $invalidProperties[] = "'delivered_volume' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['last_sync_at'] === null) {
            $invalidProperties[] = "'last_sync_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Ordernummer
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string $order_status Orderstatus
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!in_array($order_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_status', must be one of '%s'",
                    $order_status,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($order_status)) {
            throw new \InvalidArgumentException('non-nullable order_status cannot be null');
        }

        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id Kund
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {

        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }

        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \OpenAPI\Client\Model\OrderDtoDeliveryAddress
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \OpenAPI\Client\Model\OrderDtoDeliveryAddress $delivery_address delivery_address
     *
     * @return self
     */
    public function setDeliveryAddress($delivery_address)
    {

        if (is_null($delivery_address)) {
            throw new \InvalidArgumentException('non-nullable delivery_address cannot be null');
        }

        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets last_sync_status
     *
     * @return string
     */
    public function getLastSyncStatus()
    {
        return $this->container['last_sync_status'];
    }

    /**
     * Sets last_sync_status
     *
     * @param string $last_sync_status Synkronisering status
     *
     * @return self
     */
    public function setLastSyncStatus($last_sync_status)
    {
        $allowedValues = $this->getLastSyncStatusAllowableValues();
        if (!in_array($last_sync_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'last_sync_status', must be one of '%s'",
                    $last_sync_status,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($last_sync_status)) {
            throw new \InvalidArgumentException('non-nullable last_sync_status cannot be null');
        }

        $this->container['last_sync_status'] = $last_sync_status;

        return $this;
    }

    /**
     * Gets delivered_volume
     *
     * @return float
     */
    public function getDeliveredVolume()
    {
        return $this->container['delivered_volume'];
    }

    /**
     * Sets delivered_volume
     *
     * @param float $delivered_volume Levererad volym
     *
     * @return self
     */
    public function setDeliveredVolume($delivered_volume)
    {

        if (is_null($delivered_volume)) {
            throw new \InvalidArgumentException('non-nullable delivered_volume cannot be null');
        }

        $this->container['delivered_volume'] = $delivered_volume;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Skapades
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {

        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }

        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Senast ändrad
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {

        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }

        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets last_sync_at
     *
     * @return \DateTime
     */
    public function getLastSyncAt()
    {
        return $this->container['last_sync_at'];
    }

    /**
     * Sets last_sync_at
     *
     * @param \DateTime $last_sync_at Synkronisera
     *
     * @return self
     */
    public function setLastSyncAt($last_sync_at)
    {

        if (is_null($last_sync_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_sync_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_sync_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['last_sync_at'] = $last_sync_at;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string|null
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string|null $document_number Dokumentnummer
     *
     * @return self
     */
    public function setDocumentNumber($document_number)
    {

        if (is_null($document_number)) {
            array_push($this->openAPINullablesSetToNull, 'document_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets project_number
     *
     * @return string|null
     */
    public function getProjectNumber()
    {
        return $this->container['project_number'];
    }

    /**
     * Sets project_number
     *
     * @param string|null $project_number Projektnummer
     *
     * @return self
     */
    public function setProjectNumber($project_number)
    {

        if (is_null($project_number)) {
            array_push($this->openAPINullablesSetToNull, 'project_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['project_number'] = $project_number;

        return $this;
    }

    /**
     * Gets sales_responsible
     *
     * @return string|null
     */
    public function getSalesResponsible()
    {
        return $this->container['sales_responsible'];
    }

    /**
     * Sets sales_responsible
     *
     * @param string|null $sales_responsible Ansvarig säljare
     *
     * @return self
     */
    public function setSalesResponsible($sales_responsible)
    {

        if (is_null($sales_responsible)) {
            array_push($this->openAPINullablesSetToNull, 'sales_responsible');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_responsible', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['sales_responsible'] = $sales_responsible;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return string|null
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param string|null $order_date Orderdatum
     *
     * @return self
     */
    public function setOrderDate($order_date)
    {

        if (is_null($order_date)) {
            array_push($this->openAPINullablesSetToNull, 'order_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string|null $delivery_date Leveransdatum
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {

        if (is_null($delivery_date)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets planned_start_date
     *
     * @return string|null
     */
    public function getPlannedStartDate()
    {
        return $this->container['planned_start_date'];
    }

    /**
     * Sets planned_start_date
     *
     * @param string|null $planned_start_date Planerat Startdatum
     *
     * @return self
     */
    public function setPlannedStartDate($planned_start_date)
    {

        if (is_null($planned_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'planned_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('planned_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['planned_start_date'] = $planned_start_date;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime|null $deleted_at deleted_at
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {

        if (is_null($deleted_at)) {
            array_push($this->openAPINullablesSetToNull, 'deleted_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {

        if (is_null($updated_by)) {
            array_push($this->openAPINullablesSetToNull, 'updated_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets delivery_name
     *
     * @return string|null
     */
    public function getDeliveryName()
    {
        return $this->container['delivery_name'];
    }

    /**
     * Sets delivery_name
     *
     * @param string|null $delivery_name Mottagarnamn
     *
     * @return self
     */
    public function setDeliveryName($delivery_name)
    {

        if (is_null($delivery_name)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['delivery_name'] = $delivery_name;

        return $this;
    }

    /**
     * Gets delivery_line_count
     *
     * @return float|null
     */
    public function getDeliveryLineCount()
    {
        return $this->container['delivery_line_count'];
    }

    /**
     * Sets delivery_line_count
     *
     * @param float|null $delivery_line_count Leveranser
     *
     * @return self
     */
    public function setDeliveryLineCount($delivery_line_count)
    {

        if (is_null($delivery_line_count)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_line_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_line_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['delivery_line_count'] = $delivery_line_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


