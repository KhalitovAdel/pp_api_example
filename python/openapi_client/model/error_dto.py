# coding: utf-8

"""
    Integration

             Here can be some description if that needed       # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ErrorDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "code",
            "message",
            "statusCode",
            "timestamp",
        }
        
        class properties:
            message = schemas.StrSchema
            timestamp = schemas.StrSchema
            
            
            class statusCode(
                schemas.EnumBase,
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        400: "POSITIVE_400",
                        401: "POSITIVE_401",
                        404: "POSITIVE_404",
                        500: "POSITIVE_500",
                    }
                
                @schemas.classproperty
                def POSITIVE_400(cls):
                    return cls(400)
                
                @schemas.classproperty
                def POSITIVE_401(cls):
                    return cls(401)
                
                @schemas.classproperty
                def POSITIVE_404(cls):
                    return cls(404)
                
                @schemas.classproperty
                def POSITIVE_500(cls):
                    return cls(500)
            
            
            class code(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "INTERNAL_ERROR": "INTERNAL_ERROR",
                        "INVALID_INPUT": "INVALID_INPUT",
                        "REQUEST_TIMEOUT": "REQUEST_TIMEOUT",
                        "INVALID_ID": "INVALID_ID",
                        "ACCESS_VIOLATION": "ACCESS_VIOLATION",
                        "NOT_NULL_EXPECTED": "NOT_NULL_EXPECTED",
                        "END_DATE_IS_BEFORE_START_DATE": "END_DATE_IS_BEFORE_START_DATE",
                        "VALUE_ALREADY_CHANGED": "VALUE_ALREADY_CHANGED",
                        "TOO_MANY_REQUESTS": "TOO_MANY_REQUESTS",
                        "NOT_AUTHORIZED": "NOT_AUTHORIZED",
                        "LANDFILL_NOT_FOUND": "LANDFILL_NOT_FOUND",
                        "LANDFILL_INVALID_RECEIVER_USER": "LANDFILL_INVALID_RECEIVER_USER",
                        "LANDFILL_CUSTOMER_REQUIRED": "LANDFILL_CUSTOMER_REQUIRED",
                        "INVALID_LAYER_TYPE_FOR_LANDFILL": "INVALID_LAYER_TYPE_FOR_LANDFILL",
                        "INVALID_SUBAREA_PRICE_CHANGE": "INVALID_SUBAREA_PRICE_CHANGE",
                        "ORDER_NOT_FOUND": "ORDER_NOT_FOUND",
                        "ORDER_ALREADY_ATTACHED": "ORDER_ALREADY_ATTACHED",
                        "ORDER_RECEIPTS_DIRECTORY_EXISTS": "ORDER_RECEIPTS_DIRECTORY_EXISTS",
                        "ORDER_RECEIPTS_DIRECTORY_RENAME_ERROR": "ORDER_RECEIPTS_DIRECTORY_RENAME_ERROR",
                        "ORDER_RECEIPTS_FILE_RENAME_ERROR": "ORDER_RECEIPTS_FILE_RENAME_ERROR",
                        "PROJECT_IS_NOT_AVAILABLE": "PROJECT_IS_NOT_AVAILABLE",
                        "DUMP_LOAD_NOT_FOUND": "DUMP_LOAD_NOT_FOUND",
                        "PROJECT_NAME_INVALID": "PROJECT_NAME_INVALID",
                        "PROJECT_NOT_FOUND": "PROJECT_NOT_FOUND",
                        "PROJECT_HAS_ORDER_WITH_OTHER_CUSTOMER": "PROJECT_HAS_ORDER_WITH_OTHER_CUSTOMER",
                        "PROJECT_HAS_CUSTOMER": "PROJECT_HAS_CUSTOMER",
                        "PROJECT_ACTIVE_LOCATION_CANNOT_BE_CHANGED": "PROJECT_ACTIVE_LOCATION_CANNOT_BE_CHANGED",
                        "PROJECT_CUSTOMER_REQUIRED": "PROJECT_CUSTOMER_REQUIRED",
                        "EMAIL_BLOCKED": "EMAIL_BLOCKED",
                        "DUMP_LOAD_STATUS_UNKNOWN": "DUMP_LOAD_STATUS_UNKNOWN",
                        "DUMP_LOAD_INVALID_TARGET_STATUS_OR_NO_PERMISSIONS": "DUMP_LOAD_INVALID_TARGET_STATUS_OR_NO_PERMISSIONS",
                        "DUMP_LOAD_NO_PERMISSIONS": "DUMP_LOAD_NO_PERMISSIONS",
                        "DUMP_LOAD_EDIT_FORBIDDEN_IN_CURRENT_STATUS": "DUMP_LOAD_EDIT_FORBIDDEN_IN_CURRENT_STATUS",
                        "DUMP_LOAD_FIELDS_HAVE_INVALID_VALUES": "DUMP_LOAD_FIELDS_HAVE_INVALID_VALUES",
                        "DUMP_LOAD_FIELDS_INVALID_CONDITIONS": "DUMP_LOAD_FIELDS_INVALID_CONDITIONS",
                        "DUMP_LOAD_NOT_SPECIFIED": "DUMP_LOAD_NOT_SPECIFIED",
                        "DUMP_LOAD_NOT_SIGNED": "DUMP_LOAD_NOT_SIGNED",
                        "DUMP_LOAD_NEED_TO_SEND": "DUMP_LOAD_NEED_TO_SEND",
                        "DUMP_LOAD_CUSTOMER_NEED_FOR_SIGN": "DUMP_LOAD_CUSTOMER_NEED_FOR_SIGN",
                        "DRIVER_EMAIL_EXISTS": "DRIVER_EMAIL_EXISTS",
                        "DRIVER_PHONE_EXISTS": "DRIVER_PHONE_EXISTS",
                        "CANNOT_SET_DATE_IN_PAST": "CANNOT_SET_DATE_IN_PAST",
                        "PROJECT_EDIT_FORBIDDEN_IN_CURRENT_STATUS": "PROJECT_EDIT_FORBIDDEN_IN_CURRENT_STATUS",
                        "USER_EXISTS": "USER_EXISTS",
                        "USER_NOT_FOUND": "USER_NOT_FOUND",
                        "USER_EMPTY_OLD_PASSWORD": "USER_EMPTY_OLD_PASSWORD",
                        "USER_INVALID_OLD_PASSWORD": "USER_INVALID_OLD_PASSWORD",
                        "USER_PASSWORD_NOT_EQUAL": "USER_PASSWORD_NOT_EQUAL",
                        "USER_PASSWORD_SIMILAR_TO_CURRENT": "USER_PASSWORD_SIMILAR_TO_CURRENT",
                        "USER_HAS_LINKED_PROJECTS": "USER_HAS_LINKED_PROJECTS",
                        "USER_REQUIRED_CUSTOMER": "USER_REQUIRED_CUSTOMER",
                        "USER_ALREADY_INVITED": "USER_ALREADY_INVITED",
                        "EMAIL_EXISTS": "EMAIL_EXISTS",
                        "DRIVER_EMPTY_PASSWORD": "DRIVER_EMPTY_PASSWORD",
                        "DRIVER_INVALID_OLD_PASSWORD": "DRIVER_INVALID_OLD_PASSWORD",
                        "DRIVER_PASSWORD_NOT_EQUAL": "DRIVER_PASSWORD_NOT_EQUAL",
                        "EMPTY_OWNER": "EMPTY_OWNER",
                        "DUMP_TYPE_EXISTS": "DUMP_TYPE_EXISTS",
                        "DUMP_TYPE_NAME_CANNOT_BE_EMPTY": "DUMP_TYPE_NAME_CANNOT_BE_EMPTY",
                        "DUMP_TYPE_VOLUME_CANNOT_BE_EMPTY": "DUMP_TYPE_VOLUME_CANNOT_BE_EMPTY",
                        "DUMP_TYPE_TONS_PER_M3_MUST_BE_POSITIVE": "DUMP_TYPE_TONS_PER_M3_MUST_BE_POSITIVE",
                        "TOXIC_LIMITS_INVALID_VALUE": "TOXIC_LIMITS_INVALID_VALUE",
                        "SUBSTANCE_IS_USED": "SUBSTANCE_IS_USED",
                        "SUBSTANCE_CONTAMINATION_TYPE_IS_USED": "SUBSTANCE_CONTAMINATION_TYPE_IS_USED",
                        "PERMISSION_ERROR": "PERMISSION_ERROR",
                        "DELIVERY_LINE_NOT_FOUND": "DELIVERY_LINE_NOT_FOUND",
                        "COMPANY_NOT_FOUND": "COMPANY_NOT_FOUND",
                        "NETWORK_ERROR": "NETWORK_ERROR",
                        "LANDFILL_STATUS_NOT_FOUND": "LANDFILL_STATUS_NOT_FOUND",
                        "LANDFILL_STATUS_NAME_CANNOT_BE_EMPTY": "LANDFILL_STATUS_NAME_CANNOT_BE_EMPTY",
                        "LANDFILL_STATUS_EXISTS": "LANDFILL_STATUS_EXISTS",
                        "LANDFILL_TYPE_CHANGE_NOT_ALLOWED": "LANDFILL_TYPE_CHANGE_NOT_ALLOWED",
                        "LANDFILL_IS_NOT_AVAILABLE": "LANDFILL_IS_NOT_AVAILABLE",
                        "FORTNOX_ENTITY_NOT_FOUND": "FORTNOX_ENTITY_NOT_FOUND",
                        "FORTNOX_SYNC_TIMEOUT": "FORTNOX_SYNC_TIMEOUT",
                        "FORTNOX_ANOTHER_SYNC_IN_PROGRESS": "FORTNOX_ANOTHER_SYNC_IN_PROGRESS",
                        "FORTNOX_NETWORK_ERROR": "FORTNOX_NETWORK_ERROR",
                        "FORTNOX_SYNC_CANCELED": "FORTNOX_SYNC_CANCELED",
                        "EMPTY_COMPANY": "EMPTY_COMPANY",
                        "NOT_IMPLEMENTED": "NOT_IMPLEMENTED",
                        "DEVIATION_NOT_FOUND": "DEVIATION_NOT_FOUND",
                        "DEVIATION_INVALID_FIELDS": "DEVIATION_INVALID_FIELDS",
                        "FILE_NOT_FOUND": "FILE_NOT_FOUND",
                        "FILE_EXISTS": "FILE_EXISTS",
                        "FILE_TOO_LARGE": "FILE_TOO_LARGE",
                        "INVALID_FILE_NAME": "INVALID_FILE_NAME",
                        "CONVERSION_TO_PDF_ERROR": "CONVERSION_TO_PDF_ERROR",
                        "PROJECT_END_DATE_BEFORE_START_DATE": "PROJECT_END_DATE_BEFORE_START_DATE",
                        "PROJECT_NO_DATE_CHANGE_ONGOING_MASS": "PROJECT_NO_DATE_CHANGE_ONGOING_MASS",
                        "PROJECT_START_DATE_AFTER_MASS_START_DATE": "PROJECT_START_DATE_AFTER_MASS_START_DATE",
                        "PROJECT_END_DATE_BEFORE_MASS_END_DATE": "PROJECT_END_DATE_BEFORE_MASS_END_DATE",
                        "MASS_START_DATE_BEFORE_PROJECT_START_DATE": "MASS_START_DATE_BEFORE_PROJECT_START_DATE",
                        "MASS_START_DATE_BEFORE_TODAY": "MASS_START_DATE_BEFORE_TODAY",
                        "MASS_END_DATE_BEFORE_PROJECT_START_DATE": "MASS_END_DATE_BEFORE_PROJECT_START_DATE",
                        "MASS_END_DATE_BEFORE_MASS_START_DATE": "MASS_END_DATE_BEFORE_MASS_START_DATE",
                        "MASS_END_DATE_BEFORE_TODAY": "MASS_END_DATE_BEFORE_TODAY",
                        "PROJECT_END_DATE_MUST_BE_UPDATED": "PROJECT_END_DATE_MUST_BE_UPDATED",
                        "PROJECT_LOCATION_ON_WATER": "PROJECT_LOCATION_ON_WATER",
                        "LANDFILL_LOCATION_ON_WATER": "LANDFILL_LOCATION_ON_WATER",
                        "OPEN_FROM_AFTER_OPEN_TO": "OPEN_FROM_AFTER_OPEN_TO",
                        "NO_OPEN_WORK_DAY": "NO_OPEN_WORK_DAY",
                        "API_KEY_NOT_SPECIFIED": "API_KEY_NOT_SPECIFIED",
                        "API_KEY_INVALID": "API_KEY_INVALID",
                        "INVALID_LOCATION": "INVALID_LOCATION",
                        "PHONE_NUMBER_EXISTS": "PHONE_NUMBER_EXISTS",
                        "PHONE_NUMBER_HAVE_TO_BE_LOCAL_OR_INTERNATIONAL": "PHONE_NUMBER_HAVE_TO_BE_LOCAL_OR_INTERNATIONAL",
                        "PHONE_NUMBER_TOO_SHORT": "PHONE_NUMBER_TOO_SHORT",
                        "PHONE_NUMBER_TOO_LONG": "PHONE_NUMBER_TOO_LONG",
                    }
                
                @schemas.classproperty
                def INTERNAL_ERROR(cls):
                    return cls("INTERNAL_ERROR")
                
                @schemas.classproperty
                def INVALID_INPUT(cls):
                    return cls("INVALID_INPUT")
                
                @schemas.classproperty
                def REQUEST_TIMEOUT(cls):
                    return cls("REQUEST_TIMEOUT")
                
                @schemas.classproperty
                def INVALID_ID(cls):
                    return cls("INVALID_ID")
                
                @schemas.classproperty
                def ACCESS_VIOLATION(cls):
                    return cls("ACCESS_VIOLATION")
                
                @schemas.classproperty
                def NOT_NULL_EXPECTED(cls):
                    return cls("NOT_NULL_EXPECTED")
                
                @schemas.classproperty
                def END_DATE_IS_BEFORE_START_DATE(cls):
                    return cls("END_DATE_IS_BEFORE_START_DATE")
                
                @schemas.classproperty
                def VALUE_ALREADY_CHANGED(cls):
                    return cls("VALUE_ALREADY_CHANGED")
                
                @schemas.classproperty
                def TOO_MANY_REQUESTS(cls):
                    return cls("TOO_MANY_REQUESTS")
                
                @schemas.classproperty
                def NOT_AUTHORIZED(cls):
                    return cls("NOT_AUTHORIZED")
                
                @schemas.classproperty
                def LANDFILL_NOT_FOUND(cls):
                    return cls("LANDFILL_NOT_FOUND")
                
                @schemas.classproperty
                def LANDFILL_INVALID_RECEIVER_USER(cls):
                    return cls("LANDFILL_INVALID_RECEIVER_USER")
                
                @schemas.classproperty
                def LANDFILL_CUSTOMER_REQUIRED(cls):
                    return cls("LANDFILL_CUSTOMER_REQUIRED")
                
                @schemas.classproperty
                def INVALID_LAYER_TYPE_FOR_LANDFILL(cls):
                    return cls("INVALID_LAYER_TYPE_FOR_LANDFILL")
                
                @schemas.classproperty
                def INVALID_SUBAREA_PRICE_CHANGE(cls):
                    return cls("INVALID_SUBAREA_PRICE_CHANGE")
                
                @schemas.classproperty
                def ORDER_NOT_FOUND(cls):
                    return cls("ORDER_NOT_FOUND")
                
                @schemas.classproperty
                def ORDER_ALREADY_ATTACHED(cls):
                    return cls("ORDER_ALREADY_ATTACHED")
                
                @schemas.classproperty
                def ORDER_RECEIPTS_DIRECTORY_EXISTS(cls):
                    return cls("ORDER_RECEIPTS_DIRECTORY_EXISTS")
                
                @schemas.classproperty
                def ORDER_RECEIPTS_DIRECTORY_RENAME_ERROR(cls):
                    return cls("ORDER_RECEIPTS_DIRECTORY_RENAME_ERROR")
                
                @schemas.classproperty
                def ORDER_RECEIPTS_FILE_RENAME_ERROR(cls):
                    return cls("ORDER_RECEIPTS_FILE_RENAME_ERROR")
                
                @schemas.classproperty
                def PROJECT_IS_NOT_AVAILABLE(cls):
                    return cls("PROJECT_IS_NOT_AVAILABLE")
                
                @schemas.classproperty
                def DUMP_LOAD_NOT_FOUND(cls):
                    return cls("DUMP_LOAD_NOT_FOUND")
                
                @schemas.classproperty
                def PROJECT_NAME_INVALID(cls):
                    return cls("PROJECT_NAME_INVALID")
                
                @schemas.classproperty
                def PROJECT_NOT_FOUND(cls):
                    return cls("PROJECT_NOT_FOUND")
                
                @schemas.classproperty
                def PROJECT_HAS_ORDER_WITH_OTHER_CUSTOMER(cls):
                    return cls("PROJECT_HAS_ORDER_WITH_OTHER_CUSTOMER")
                
                @schemas.classproperty
                def PROJECT_HAS_CUSTOMER(cls):
                    return cls("PROJECT_HAS_CUSTOMER")
                
                @schemas.classproperty
                def PROJECT_ACTIVE_LOCATION_CANNOT_BE_CHANGED(cls):
                    return cls("PROJECT_ACTIVE_LOCATION_CANNOT_BE_CHANGED")
                
                @schemas.classproperty
                def PROJECT_CUSTOMER_REQUIRED(cls):
                    return cls("PROJECT_CUSTOMER_REQUIRED")
                
                @schemas.classproperty
                def EMAIL_BLOCKED(cls):
                    return cls("EMAIL_BLOCKED")
                
                @schemas.classproperty
                def DUMP_LOAD_STATUS_UNKNOWN(cls):
                    return cls("DUMP_LOAD_STATUS_UNKNOWN")
                
                @schemas.classproperty
                def DUMP_LOAD_INVALID_TARGET_STATUS_OR_NO_PERMISSIONS(cls):
                    return cls("DUMP_LOAD_INVALID_TARGET_STATUS_OR_NO_PERMISSIONS")
                
                @schemas.classproperty
                def DUMP_LOAD_NO_PERMISSIONS(cls):
                    return cls("DUMP_LOAD_NO_PERMISSIONS")
                
                @schemas.classproperty
                def DUMP_LOAD_EDIT_FORBIDDEN_IN_CURRENT_STATUS(cls):
                    return cls("DUMP_LOAD_EDIT_FORBIDDEN_IN_CURRENT_STATUS")
                
                @schemas.classproperty
                def DUMP_LOAD_FIELDS_HAVE_INVALID_VALUES(cls):
                    return cls("DUMP_LOAD_FIELDS_HAVE_INVALID_VALUES")
                
                @schemas.classproperty
                def DUMP_LOAD_FIELDS_INVALID_CONDITIONS(cls):
                    return cls("DUMP_LOAD_FIELDS_INVALID_CONDITIONS")
                
                @schemas.classproperty
                def DUMP_LOAD_NOT_SPECIFIED(cls):
                    return cls("DUMP_LOAD_NOT_SPECIFIED")
                
                @schemas.classproperty
                def DUMP_LOAD_NOT_SIGNED(cls):
                    return cls("DUMP_LOAD_NOT_SIGNED")
                
                @schemas.classproperty
                def DUMP_LOAD_NEED_TO_SEND(cls):
                    return cls("DUMP_LOAD_NEED_TO_SEND")
                
                @schemas.classproperty
                def DUMP_LOAD_CUSTOMER_NEED_FOR_SIGN(cls):
                    return cls("DUMP_LOAD_CUSTOMER_NEED_FOR_SIGN")
                
                @schemas.classproperty
                def DRIVER_EMAIL_EXISTS(cls):
                    return cls("DRIVER_EMAIL_EXISTS")
                
                @schemas.classproperty
                def DRIVER_PHONE_EXISTS(cls):
                    return cls("DRIVER_PHONE_EXISTS")
                
                @schemas.classproperty
                def CANNOT_SET_DATE_IN_PAST(cls):
                    return cls("CANNOT_SET_DATE_IN_PAST")
                
                @schemas.classproperty
                def PROJECT_EDIT_FORBIDDEN_IN_CURRENT_STATUS(cls):
                    return cls("PROJECT_EDIT_FORBIDDEN_IN_CURRENT_STATUS")
                
                @schemas.classproperty
                def USER_EXISTS(cls):
                    return cls("USER_EXISTS")
                
                @schemas.classproperty
                def USER_NOT_FOUND(cls):
                    return cls("USER_NOT_FOUND")
                
                @schemas.classproperty
                def USER_EMPTY_OLD_PASSWORD(cls):
                    return cls("USER_EMPTY_OLD_PASSWORD")
                
                @schemas.classproperty
                def USER_INVALID_OLD_PASSWORD(cls):
                    return cls("USER_INVALID_OLD_PASSWORD")
                
                @schemas.classproperty
                def USER_PASSWORD_NOT_EQUAL(cls):
                    return cls("USER_PASSWORD_NOT_EQUAL")
                
                @schemas.classproperty
                def USER_PASSWORD_SIMILAR_TO_CURRENT(cls):
                    return cls("USER_PASSWORD_SIMILAR_TO_CURRENT")
                
                @schemas.classproperty
                def USER_HAS_LINKED_PROJECTS(cls):
                    return cls("USER_HAS_LINKED_PROJECTS")
                
                @schemas.classproperty
                def USER_REQUIRED_CUSTOMER(cls):
                    return cls("USER_REQUIRED_CUSTOMER")
                
                @schemas.classproperty
                def USER_ALREADY_INVITED(cls):
                    return cls("USER_ALREADY_INVITED")
                
                @schemas.classproperty
                def EMAIL_EXISTS(cls):
                    return cls("EMAIL_EXISTS")
                
                @schemas.classproperty
                def DRIVER_EMPTY_PASSWORD(cls):
                    return cls("DRIVER_EMPTY_PASSWORD")
                
                @schemas.classproperty
                def DRIVER_INVALID_OLD_PASSWORD(cls):
                    return cls("DRIVER_INVALID_OLD_PASSWORD")
                
                @schemas.classproperty
                def DRIVER_PASSWORD_NOT_EQUAL(cls):
                    return cls("DRIVER_PASSWORD_NOT_EQUAL")
                
                @schemas.classproperty
                def EMPTY_OWNER(cls):
                    return cls("EMPTY_OWNER")
                
                @schemas.classproperty
                def DUMP_TYPE_EXISTS(cls):
                    return cls("DUMP_TYPE_EXISTS")
                
                @schemas.classproperty
                def DUMP_TYPE_NAME_CANNOT_BE_EMPTY(cls):
                    return cls("DUMP_TYPE_NAME_CANNOT_BE_EMPTY")
                
                @schemas.classproperty
                def DUMP_TYPE_VOLUME_CANNOT_BE_EMPTY(cls):
                    return cls("DUMP_TYPE_VOLUME_CANNOT_BE_EMPTY")
                
                @schemas.classproperty
                def DUMP_TYPE_TONS_PER_M3_MUST_BE_POSITIVE(cls):
                    return cls("DUMP_TYPE_TONS_PER_M3_MUST_BE_POSITIVE")
                
                @schemas.classproperty
                def TOXIC_LIMITS_INVALID_VALUE(cls):
                    return cls("TOXIC_LIMITS_INVALID_VALUE")
                
                @schemas.classproperty
                def SUBSTANCE_IS_USED(cls):
                    return cls("SUBSTANCE_IS_USED")
                
                @schemas.classproperty
                def SUBSTANCE_CONTAMINATION_TYPE_IS_USED(cls):
                    return cls("SUBSTANCE_CONTAMINATION_TYPE_IS_USED")
                
                @schemas.classproperty
                def PERMISSION_ERROR(cls):
                    return cls("PERMISSION_ERROR")
                
                @schemas.classproperty
                def DELIVERY_LINE_NOT_FOUND(cls):
                    return cls("DELIVERY_LINE_NOT_FOUND")
                
                @schemas.classproperty
                def COMPANY_NOT_FOUND(cls):
                    return cls("COMPANY_NOT_FOUND")
                
                @schemas.classproperty
                def NETWORK_ERROR(cls):
                    return cls("NETWORK_ERROR")
                
                @schemas.classproperty
                def LANDFILL_STATUS_NOT_FOUND(cls):
                    return cls("LANDFILL_STATUS_NOT_FOUND")
                
                @schemas.classproperty
                def LANDFILL_STATUS_NAME_CANNOT_BE_EMPTY(cls):
                    return cls("LANDFILL_STATUS_NAME_CANNOT_BE_EMPTY")
                
                @schemas.classproperty
                def LANDFILL_STATUS_EXISTS(cls):
                    return cls("LANDFILL_STATUS_EXISTS")
                
                @schemas.classproperty
                def LANDFILL_TYPE_CHANGE_NOT_ALLOWED(cls):
                    return cls("LANDFILL_TYPE_CHANGE_NOT_ALLOWED")
                
                @schemas.classproperty
                def LANDFILL_IS_NOT_AVAILABLE(cls):
                    return cls("LANDFILL_IS_NOT_AVAILABLE")
                
                @schemas.classproperty
                def FORTNOX_ENTITY_NOT_FOUND(cls):
                    return cls("FORTNOX_ENTITY_NOT_FOUND")
                
                @schemas.classproperty
                def FORTNOX_SYNC_TIMEOUT(cls):
                    return cls("FORTNOX_SYNC_TIMEOUT")
                
                @schemas.classproperty
                def FORTNOX_ANOTHER_SYNC_IN_PROGRESS(cls):
                    return cls("FORTNOX_ANOTHER_SYNC_IN_PROGRESS")
                
                @schemas.classproperty
                def FORTNOX_NETWORK_ERROR(cls):
                    return cls("FORTNOX_NETWORK_ERROR")
                
                @schemas.classproperty
                def FORTNOX_SYNC_CANCELED(cls):
                    return cls("FORTNOX_SYNC_CANCELED")
                
                @schemas.classproperty
                def EMPTY_COMPANY(cls):
                    return cls("EMPTY_COMPANY")
                
                @schemas.classproperty
                def NOT_IMPLEMENTED(cls):
                    return cls("NOT_IMPLEMENTED")
                
                @schemas.classproperty
                def DEVIATION_NOT_FOUND(cls):
                    return cls("DEVIATION_NOT_FOUND")
                
                @schemas.classproperty
                def DEVIATION_INVALID_FIELDS(cls):
                    return cls("DEVIATION_INVALID_FIELDS")
                
                @schemas.classproperty
                def FILE_NOT_FOUND(cls):
                    return cls("FILE_NOT_FOUND")
                
                @schemas.classproperty
                def FILE_EXISTS(cls):
                    return cls("FILE_EXISTS")
                
                @schemas.classproperty
                def FILE_TOO_LARGE(cls):
                    return cls("FILE_TOO_LARGE")
                
                @schemas.classproperty
                def INVALID_FILE_NAME(cls):
                    return cls("INVALID_FILE_NAME")
                
                @schemas.classproperty
                def CONVERSION_TO_PDF_ERROR(cls):
                    return cls("CONVERSION_TO_PDF_ERROR")
                
                @schemas.classproperty
                def PROJECT_END_DATE_BEFORE_START_DATE(cls):
                    return cls("PROJECT_END_DATE_BEFORE_START_DATE")
                
                @schemas.classproperty
                def PROJECT_NO_DATE_CHANGE_ONGOING_MASS(cls):
                    return cls("PROJECT_NO_DATE_CHANGE_ONGOING_MASS")
                
                @schemas.classproperty
                def PROJECT_START_DATE_AFTER_MASS_START_DATE(cls):
                    return cls("PROJECT_START_DATE_AFTER_MASS_START_DATE")
                
                @schemas.classproperty
                def PROJECT_END_DATE_BEFORE_MASS_END_DATE(cls):
                    return cls("PROJECT_END_DATE_BEFORE_MASS_END_DATE")
                
                @schemas.classproperty
                def MASS_START_DATE_BEFORE_PROJECT_START_DATE(cls):
                    return cls("MASS_START_DATE_BEFORE_PROJECT_START_DATE")
                
                @schemas.classproperty
                def MASS_START_DATE_BEFORE_TODAY(cls):
                    return cls("MASS_START_DATE_BEFORE_TODAY")
                
                @schemas.classproperty
                def MASS_END_DATE_BEFORE_PROJECT_START_DATE(cls):
                    return cls("MASS_END_DATE_BEFORE_PROJECT_START_DATE")
                
                @schemas.classproperty
                def MASS_END_DATE_BEFORE_MASS_START_DATE(cls):
                    return cls("MASS_END_DATE_BEFORE_MASS_START_DATE")
                
                @schemas.classproperty
                def MASS_END_DATE_BEFORE_TODAY(cls):
                    return cls("MASS_END_DATE_BEFORE_TODAY")
                
                @schemas.classproperty
                def PROJECT_END_DATE_MUST_BE_UPDATED(cls):
                    return cls("PROJECT_END_DATE_MUST_BE_UPDATED")
                
                @schemas.classproperty
                def PROJECT_LOCATION_ON_WATER(cls):
                    return cls("PROJECT_LOCATION_ON_WATER")
                
                @schemas.classproperty
                def LANDFILL_LOCATION_ON_WATER(cls):
                    return cls("LANDFILL_LOCATION_ON_WATER")
                
                @schemas.classproperty
                def OPEN_FROM_AFTER_OPEN_TO(cls):
                    return cls("OPEN_FROM_AFTER_OPEN_TO")
                
                @schemas.classproperty
                def NO_OPEN_WORK_DAY(cls):
                    return cls("NO_OPEN_WORK_DAY")
                
                @schemas.classproperty
                def API_KEY_NOT_SPECIFIED(cls):
                    return cls("API_KEY_NOT_SPECIFIED")
                
                @schemas.classproperty
                def API_KEY_INVALID(cls):
                    return cls("API_KEY_INVALID")
                
                @schemas.classproperty
                def INVALID_LOCATION(cls):
                    return cls("INVALID_LOCATION")
                
                @schemas.classproperty
                def PHONE_NUMBER_EXISTS(cls):
                    return cls("PHONE_NUMBER_EXISTS")
                
                @schemas.classproperty
                def PHONE_NUMBER_HAVE_TO_BE_LOCAL_OR_INTERNATIONAL(cls):
                    return cls("PHONE_NUMBER_HAVE_TO_BE_LOCAL_OR_INTERNATIONAL")
                
                @schemas.classproperty
                def PHONE_NUMBER_TOO_SHORT(cls):
                    return cls("PHONE_NUMBER_TOO_SHORT")
                
                @schemas.classproperty
                def PHONE_NUMBER_TOO_LONG(cls):
                    return cls("PHONE_NUMBER_TOO_LONG")
            __annotations__ = {
                "message": message,
                "timestamp": timestamp,
                "statusCode": statusCode,
                "code": code,
            }
    
    code: MetaOapg.properties.code
    message: MetaOapg.properties.message
    statusCode: MetaOapg.properties.statusCode
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusCode"]) -> MetaOapg.properties.statusCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["message", "timestamp", "statusCode", "code", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusCode"]) -> MetaOapg.properties.statusCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["message", "timestamp", "statusCode", "code", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        code: typing.Union[MetaOapg.properties.code, str, ],
        message: typing.Union[MetaOapg.properties.message, str, ],
        statusCode: typing.Union[MetaOapg.properties.statusCode, decimal.Decimal, int, float, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ErrorDto':
        return super().__new__(
            cls,
            *args,
            code=code,
            message=message,
            statusCode=statusCode,
            timestamp=timestamp,
            _configuration=_configuration,
            **kwargs,
        )
