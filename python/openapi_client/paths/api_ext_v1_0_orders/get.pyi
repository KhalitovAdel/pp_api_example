# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from openapi_client.model.order_dto import OrderDto
from openapi_client.model.validation_error_dto import ValidationErrorDto
from openapi_client.model.unauthorized_error_dto import UnauthorizedErrorDto
from openapi_client.model.error_dto import ErrorDto
from openapi_client.model.server_error_dto import ServerErrorDto

# Query params


class DeliveryCitySchema(
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DeliveryCitySchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class DeliveryLineCountFromSchema(
    schemas.NumberBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneDecimalMixin
):


    def __new__(
        cls,
        *args: typing.Union[None, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DeliveryLineCountFromSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class DeliveryLineCountToSchema(
    schemas.NumberBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneDecimalMixin
):


    def __new__(
        cls,
        *args: typing.Union[None, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DeliveryLineCountToSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class DeliveryNameSchema(
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DeliveryNameSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class DocumentNumberSchema(
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DocumentNumberSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class DvolumeFromSchema(
    schemas.NumberBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneDecimalMixin
):


    def __new__(
        cls,
        *args: typing.Union[None, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DvolumeFromSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class DvolumeToSchema(
    schemas.NumberBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneDecimalMixin
):


    def __new__(
        cls,
        *args: typing.Union[None, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DvolumeToSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class EndDateSchema(
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'EndDateSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class ExcludeAttachedSchema(
    schemas.BoolBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneBoolMixin
):


    def __new__(
        cls,
        *args: typing.Union[None, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ExcludeAttachedSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class IsCloseFilterSchema(
    schemas.BoolBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneBoolMixin
):


    def __new__(
        cls,
        *args: typing.Union[None, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IsCloseFilterSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class IsOpenFilterSchema(
    schemas.BoolBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneBoolMixin
):


    def __new__(
        cls,
        *args: typing.Union[None, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IsOpenFilterSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class StartDateSchema(
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'StartDateSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'deliveryCity': typing.Union[DeliveryCitySchema, None, str, ],
        'deliveryLineCountFrom': typing.Union[DeliveryLineCountFromSchema, None, decimal.Decimal, int, float, ],
        'deliveryLineCountTo': typing.Union[DeliveryLineCountToSchema, None, decimal.Decimal, int, float, ],
        'deliveryName': typing.Union[DeliveryNameSchema, None, str, ],
        'documentNumber': typing.Union[DocumentNumberSchema, None, str, ],
        'dvolumeFrom': typing.Union[DvolumeFromSchema, None, decimal.Decimal, int, float, ],
        'dvolumeTo': typing.Union[DvolumeToSchema, None, decimal.Decimal, int, float, ],
        'endDate': typing.Union[EndDateSchema, None, str, ],
        'excludeAttached': typing.Union[ExcludeAttachedSchema, None, bool, ],
        'isCloseFilter': typing.Union[IsCloseFilterSchema, None, bool, ],
        'isOpenFilter': typing.Union[IsOpenFilterSchema, None, bool, ],
        'startDate': typing.Union[StartDateSchema, None, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_delivery_city = api_client.QueryParameter(
    name="deliveryCity",
    style=api_client.ParameterStyle.FORM,
    schema=DeliveryCitySchema,
    explode=True,
)
request_query_delivery_line_count_from = api_client.QueryParameter(
    name="deliveryLineCountFrom",
    style=api_client.ParameterStyle.FORM,
    schema=DeliveryLineCountFromSchema,
    explode=True,
)
request_query_delivery_line_count_to = api_client.QueryParameter(
    name="deliveryLineCountTo",
    style=api_client.ParameterStyle.FORM,
    schema=DeliveryLineCountToSchema,
    explode=True,
)
request_query_delivery_name = api_client.QueryParameter(
    name="deliveryName",
    style=api_client.ParameterStyle.FORM,
    schema=DeliveryNameSchema,
    explode=True,
)
request_query_document_number = api_client.QueryParameter(
    name="documentNumber",
    style=api_client.ParameterStyle.FORM,
    schema=DocumentNumberSchema,
    explode=True,
)
request_query_dvolume_from = api_client.QueryParameter(
    name="dvolumeFrom",
    style=api_client.ParameterStyle.FORM,
    schema=DvolumeFromSchema,
    explode=True,
)
request_query_dvolume_to = api_client.QueryParameter(
    name="dvolumeTo",
    style=api_client.ParameterStyle.FORM,
    schema=DvolumeToSchema,
    explode=True,
)
request_query_end_date = api_client.QueryParameter(
    name="endDate",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateSchema,
    explode=True,
)
request_query_exclude_attached = api_client.QueryParameter(
    name="excludeAttached",
    style=api_client.ParameterStyle.FORM,
    schema=ExcludeAttachedSchema,
    explode=True,
)
request_query_is_close_filter = api_client.QueryParameter(
    name="isCloseFilter",
    style=api_client.ParameterStyle.FORM,
    schema=IsCloseFilterSchema,
    explode=True,
)
request_query_is_open_filter = api_client.QueryParameter(
    name="isOpenFilter",
    style=api_client.ParameterStyle.FORM,
    schema=IsOpenFilterSchema,
    explode=True,
)
request_query_start_date = api_client.QueryParameter(
    name="startDate",
    style=api_client.ParameterStyle.FORM,
    schema=StartDateSchema,
    explode=True,
)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['OrderDto']:
            return OrderDto

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple['OrderDto'], typing.List['OrderDto']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'OrderDto':
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


class SchemaFor400ResponseBodyApplicationJson(
    schemas.ComposedSchema,
):


    class MetaOapg:
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                ErrorDto,
                ValidationErrorDto,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor400ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor401ResponseBodyApplicationJson = UnauthorizedErrorDto


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor401ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = ServerErrorDto


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _list_orders_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _list_orders_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _list_orders_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _list_orders_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_delivery_city,
            request_query_delivery_line_count_from,
            request_query_delivery_line_count_to,
            request_query_delivery_name,
            request_query_document_number,
            request_query_dvolume_from,
            request_query_dvolume_to,
            request_query_end_date,
            request_query_exclude_attached,
            request_query_is_close_filter,
            request_query_is_open_filter,
            request_query_start_date,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class ListOrders(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def list_orders(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def list_orders(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def list_orders(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def list_orders(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_orders_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_orders_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


