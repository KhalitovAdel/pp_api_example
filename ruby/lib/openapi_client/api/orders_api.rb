=begin
#Integration

#         Here can be some description if that needed     

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class OrdersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :delivery_city Stad
    # @option opts [Float] :delivery_line_count_from 
    # @option opts [Float] :delivery_line_count_to 
    # @option opts [String] :delivery_name Mottagarnamn
    # @option opts [String] :document_number Dokumentnummer
    # @option opts [Float] :dvolume_from Levererad volym från
    # @option opts [Float] :dvolume_to Levererad volym till
    # @option opts [String] :end_date Slutdatum
    # @option opts [Boolean] :exclude_attached 
    # @option opts [Boolean] :is_close_filter 
    # @option opts [Boolean] :is_open_filter 
    # @option opts [String] :start_date Startdatum
    # @return [Array<OrderDto>]
    def list_orders(opts = {})
      data, _status_code, _headers = list_orders_with_http_info(opts)
      data
    end

    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :delivery_city Stad
    # @option opts [Float] :delivery_line_count_from 
    # @option opts [Float] :delivery_line_count_to 
    # @option opts [String] :delivery_name Mottagarnamn
    # @option opts [String] :document_number Dokumentnummer
    # @option opts [Float] :dvolume_from Levererad volym från
    # @option opts [Float] :dvolume_to Levererad volym till
    # @option opts [String] :end_date Slutdatum
    # @option opts [Boolean] :exclude_attached 
    # @option opts [Boolean] :is_close_filter 
    # @option opts [Boolean] :is_open_filter 
    # @option opts [String] :start_date Startdatum
    # @return [Array<(Array<OrderDto>, Integer, Hash)>] Array<OrderDto> data, response status code and response headers
    def list_orders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.list_orders ...'
      end
      # resource path
      local_var_path = '/api-ext/v1.0/orders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deliveryCity'] = opts[:'delivery_city'] if !opts[:'delivery_city'].nil?
      query_params[:'deliveryLineCountFrom'] = opts[:'delivery_line_count_from'] if !opts[:'delivery_line_count_from'].nil?
      query_params[:'deliveryLineCountTo'] = opts[:'delivery_line_count_to'] if !opts[:'delivery_line_count_to'].nil?
      query_params[:'deliveryName'] = opts[:'delivery_name'] if !opts[:'delivery_name'].nil?
      query_params[:'documentNumber'] = opts[:'document_number'] if !opts[:'document_number'].nil?
      query_params[:'dvolumeFrom'] = opts[:'dvolume_from'] if !opts[:'dvolume_from'].nil?
      query_params[:'dvolumeTo'] = opts[:'dvolume_to'] if !opts[:'dvolume_to'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'excludeAttached'] = opts[:'exclude_attached'] if !opts[:'exclude_attached'].nil?
      query_params[:'isCloseFilter'] = opts[:'is_close_filter'] if !opts[:'is_close_filter'].nil?
      query_params[:'isOpenFilter'] = opts[:'is_open_filter'] if !opts[:'is_open_filter'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrderDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"OrdersApi.list_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#list_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # @param order_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [OrderDto]
    def read_order(order_number, opts = {})
      data, _status_code, _headers = read_order_with_http_info(order_number, opts)
      data
    end

    # 
    # @param order_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderDto, Integer, Hash)>] OrderDto data, response status code and response headers
    def read_order_with_http_info(order_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.read_order ...'
      end
      # verify the required parameter 'order_number' is set
      if @api_client.config.client_side_validation && order_number.nil?
        fail ArgumentError, "Missing the required parameter 'order_number' when calling OrdersApi.read_order"
      end
      # resource path
      local_var_path = '/api-ext/v1.0/orders/{orderNumber}'.sub('{' + 'orderNumber' + '}', CGI.escape(order_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"OrdersApi.read_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#read_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
