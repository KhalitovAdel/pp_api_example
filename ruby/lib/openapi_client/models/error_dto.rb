=begin
#Integration

#         Here can be some description if that needed     

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class ErrorDto
    attr_accessor :message

    # Returns a date as a string value in ISO format.
    attr_accessor :timestamp

    attr_accessor :status_code

    attr_accessor :code

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'message' => :'message',
        :'timestamp' => :'timestamp',
        :'status_code' => :'statusCode',
        :'code' => :'code'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'message' => :'String',
        :'timestamp' => :'String',
        :'status_code' => :'Float',
        :'code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ErrorDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ErrorDto`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'status_code')
        self.status_code = attributes[:'status_code']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @message.nil?
        invalid_properties.push('invalid value for "message", message cannot be nil.')
      end

      if @timestamp.nil?
        invalid_properties.push('invalid value for "timestamp", timestamp cannot be nil.')
      end

      if @status_code.nil?
        invalid_properties.push('invalid value for "status_code", status_code cannot be nil.')
      end

      if @code.nil?
        invalid_properties.push('invalid value for "code", code cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @message.nil?
      return false if @timestamp.nil?
      return false if @status_code.nil?
      status_code_validator = EnumAttributeValidator.new('Float', [400, 401, 404, 500])
      return false unless status_code_validator.valid?(@status_code)
      return false if @code.nil?
      code_validator = EnumAttributeValidator.new('String', ["INTERNAL_ERROR", "INVALID_INPUT", "REQUEST_TIMEOUT", "INVALID_ID", "ACCESS_VIOLATION", "NOT_NULL_EXPECTED", "END_DATE_IS_BEFORE_START_DATE", "VALUE_ALREADY_CHANGED", "TOO_MANY_REQUESTS", "NOT_AUTHORIZED", "LANDFILL_NOT_FOUND", "LANDFILL_INVALID_RECEIVER_USER", "LANDFILL_CUSTOMER_REQUIRED", "INVALID_LAYER_TYPE_FOR_LANDFILL", "INVALID_SUBAREA_PRICE_CHANGE", "ORDER_NOT_FOUND", "ORDER_ALREADY_ATTACHED", "ORDER_RECEIPTS_DIRECTORY_EXISTS", "ORDER_RECEIPTS_DIRECTORY_RENAME_ERROR", "ORDER_RECEIPTS_FILE_RENAME_ERROR", "PROJECT_IS_NOT_AVAILABLE", "DUMP_LOAD_NOT_FOUND", "PROJECT_NAME_INVALID", "PROJECT_NOT_FOUND", "PROJECT_HAS_ORDER_WITH_OTHER_CUSTOMER", "PROJECT_HAS_CUSTOMER", "PROJECT_ACTIVE_LOCATION_CANNOT_BE_CHANGED", "PROJECT_CUSTOMER_REQUIRED", "EMAIL_BLOCKED", "DUMP_LOAD_STATUS_UNKNOWN", "DUMP_LOAD_INVALID_TARGET_STATUS_OR_NO_PERMISSIONS", "DUMP_LOAD_NO_PERMISSIONS", "DUMP_LOAD_EDIT_FORBIDDEN_IN_CURRENT_STATUS", "DUMP_LOAD_FIELDS_HAVE_INVALID_VALUES", "DUMP_LOAD_FIELDS_INVALID_CONDITIONS", "DUMP_LOAD_NOT_SPECIFIED", "DUMP_LOAD_NOT_SIGNED", "DUMP_LOAD_NEED_TO_SEND", "DUMP_LOAD_CUSTOMER_NEED_FOR_SIGN", "DRIVER_EMAIL_EXISTS", "DRIVER_PHONE_EXISTS", "CANNOT_SET_DATE_IN_PAST", "PROJECT_EDIT_FORBIDDEN_IN_CURRENT_STATUS", "USER_EXISTS", "USER_NOT_FOUND", "USER_EMPTY_OLD_PASSWORD", "USER_INVALID_OLD_PASSWORD", "USER_PASSWORD_NOT_EQUAL", "USER_PASSWORD_SIMILAR_TO_CURRENT", "USER_HAS_LINKED_PROJECTS", "USER_REQUIRED_CUSTOMER", "USER_ALREADY_INVITED", "EMAIL_EXISTS", "DRIVER_EMPTY_PASSWORD", "DRIVER_INVALID_OLD_PASSWORD", "DRIVER_PASSWORD_NOT_EQUAL", "EMPTY_OWNER", "DUMP_TYPE_EXISTS", "DUMP_TYPE_NAME_CANNOT_BE_EMPTY", "DUMP_TYPE_VOLUME_CANNOT_BE_EMPTY", "DUMP_TYPE_TONS_PER_M3_MUST_BE_POSITIVE", "TOXIC_LIMITS_INVALID_VALUE", "SUBSTANCE_IS_USED", "SUBSTANCE_CONTAMINATION_TYPE_IS_USED", "PERMISSION_ERROR", "DELIVERY_LINE_NOT_FOUND", "COMPANY_NOT_FOUND", "NETWORK_ERROR", "LANDFILL_STATUS_NOT_FOUND", "LANDFILL_STATUS_NAME_CANNOT_BE_EMPTY", "LANDFILL_STATUS_EXISTS", "LANDFILL_TYPE_CHANGE_NOT_ALLOWED", "LANDFILL_IS_NOT_AVAILABLE", "FORTNOX_ENTITY_NOT_FOUND", "FORTNOX_SYNC_TIMEOUT", "FORTNOX_ANOTHER_SYNC_IN_PROGRESS", "FORTNOX_NETWORK_ERROR", "FORTNOX_SYNC_CANCELED", "EMPTY_COMPANY", "NOT_IMPLEMENTED", "DEVIATION_NOT_FOUND", "DEVIATION_INVALID_FIELDS", "FILE_NOT_FOUND", "FILE_EXISTS", "FILE_TOO_LARGE", "INVALID_FILE_NAME", "CONVERSION_TO_PDF_ERROR", "PROJECT_END_DATE_BEFORE_START_DATE", "PROJECT_NO_DATE_CHANGE_ONGOING_MASS", "PROJECT_START_DATE_AFTER_MASS_START_DATE", "PROJECT_END_DATE_BEFORE_MASS_END_DATE", "MASS_START_DATE_BEFORE_PROJECT_START_DATE", "MASS_START_DATE_BEFORE_TODAY", "MASS_END_DATE_BEFORE_PROJECT_START_DATE", "MASS_END_DATE_BEFORE_MASS_START_DATE", "MASS_END_DATE_BEFORE_TODAY", "PROJECT_END_DATE_MUST_BE_UPDATED", "PROJECT_LOCATION_ON_WATER", "LANDFILL_LOCATION_ON_WATER", "OPEN_FROM_AFTER_OPEN_TO", "NO_OPEN_WORK_DAY", "API_KEY_NOT_SPECIFIED", "API_KEY_INVALID", "INVALID_LOCATION", "PHONE_NUMBER_EXISTS", "PHONE_NUMBER_HAVE_TO_BE_LOCAL_OR_INTERNATIONAL", "PHONE_NUMBER_TOO_SHORT", "PHONE_NUMBER_TOO_LONG"])
      return false unless code_validator.valid?(@code)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status_code Object to be assigned
    def status_code=(status_code)
      validator = EnumAttributeValidator.new('Float', [400, 401, 404, 500])
      unless validator.valid?(status_code)
        fail ArgumentError, "invalid value for \"status_code\", must be one of #{validator.allowable_values}."
      end
      @status_code = status_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] code Object to be assigned
    def code=(code)
      validator = EnumAttributeValidator.new('String', ["INTERNAL_ERROR", "INVALID_INPUT", "REQUEST_TIMEOUT", "INVALID_ID", "ACCESS_VIOLATION", "NOT_NULL_EXPECTED", "END_DATE_IS_BEFORE_START_DATE", "VALUE_ALREADY_CHANGED", "TOO_MANY_REQUESTS", "NOT_AUTHORIZED", "LANDFILL_NOT_FOUND", "LANDFILL_INVALID_RECEIVER_USER", "LANDFILL_CUSTOMER_REQUIRED", "INVALID_LAYER_TYPE_FOR_LANDFILL", "INVALID_SUBAREA_PRICE_CHANGE", "ORDER_NOT_FOUND", "ORDER_ALREADY_ATTACHED", "ORDER_RECEIPTS_DIRECTORY_EXISTS", "ORDER_RECEIPTS_DIRECTORY_RENAME_ERROR", "ORDER_RECEIPTS_FILE_RENAME_ERROR", "PROJECT_IS_NOT_AVAILABLE", "DUMP_LOAD_NOT_FOUND", "PROJECT_NAME_INVALID", "PROJECT_NOT_FOUND", "PROJECT_HAS_ORDER_WITH_OTHER_CUSTOMER", "PROJECT_HAS_CUSTOMER", "PROJECT_ACTIVE_LOCATION_CANNOT_BE_CHANGED", "PROJECT_CUSTOMER_REQUIRED", "EMAIL_BLOCKED", "DUMP_LOAD_STATUS_UNKNOWN", "DUMP_LOAD_INVALID_TARGET_STATUS_OR_NO_PERMISSIONS", "DUMP_LOAD_NO_PERMISSIONS", "DUMP_LOAD_EDIT_FORBIDDEN_IN_CURRENT_STATUS", "DUMP_LOAD_FIELDS_HAVE_INVALID_VALUES", "DUMP_LOAD_FIELDS_INVALID_CONDITIONS", "DUMP_LOAD_NOT_SPECIFIED", "DUMP_LOAD_NOT_SIGNED", "DUMP_LOAD_NEED_TO_SEND", "DUMP_LOAD_CUSTOMER_NEED_FOR_SIGN", "DRIVER_EMAIL_EXISTS", "DRIVER_PHONE_EXISTS", "CANNOT_SET_DATE_IN_PAST", "PROJECT_EDIT_FORBIDDEN_IN_CURRENT_STATUS", "USER_EXISTS", "USER_NOT_FOUND", "USER_EMPTY_OLD_PASSWORD", "USER_INVALID_OLD_PASSWORD", "USER_PASSWORD_NOT_EQUAL", "USER_PASSWORD_SIMILAR_TO_CURRENT", "USER_HAS_LINKED_PROJECTS", "USER_REQUIRED_CUSTOMER", "USER_ALREADY_INVITED", "EMAIL_EXISTS", "DRIVER_EMPTY_PASSWORD", "DRIVER_INVALID_OLD_PASSWORD", "DRIVER_PASSWORD_NOT_EQUAL", "EMPTY_OWNER", "DUMP_TYPE_EXISTS", "DUMP_TYPE_NAME_CANNOT_BE_EMPTY", "DUMP_TYPE_VOLUME_CANNOT_BE_EMPTY", "DUMP_TYPE_TONS_PER_M3_MUST_BE_POSITIVE", "TOXIC_LIMITS_INVALID_VALUE", "SUBSTANCE_IS_USED", "SUBSTANCE_CONTAMINATION_TYPE_IS_USED", "PERMISSION_ERROR", "DELIVERY_LINE_NOT_FOUND", "COMPANY_NOT_FOUND", "NETWORK_ERROR", "LANDFILL_STATUS_NOT_FOUND", "LANDFILL_STATUS_NAME_CANNOT_BE_EMPTY", "LANDFILL_STATUS_EXISTS", "LANDFILL_TYPE_CHANGE_NOT_ALLOWED", "LANDFILL_IS_NOT_AVAILABLE", "FORTNOX_ENTITY_NOT_FOUND", "FORTNOX_SYNC_TIMEOUT", "FORTNOX_ANOTHER_SYNC_IN_PROGRESS", "FORTNOX_NETWORK_ERROR", "FORTNOX_SYNC_CANCELED", "EMPTY_COMPANY", "NOT_IMPLEMENTED", "DEVIATION_NOT_FOUND", "DEVIATION_INVALID_FIELDS", "FILE_NOT_FOUND", "FILE_EXISTS", "FILE_TOO_LARGE", "INVALID_FILE_NAME", "CONVERSION_TO_PDF_ERROR", "PROJECT_END_DATE_BEFORE_START_DATE", "PROJECT_NO_DATE_CHANGE_ONGOING_MASS", "PROJECT_START_DATE_AFTER_MASS_START_DATE", "PROJECT_END_DATE_BEFORE_MASS_END_DATE", "MASS_START_DATE_BEFORE_PROJECT_START_DATE", "MASS_START_DATE_BEFORE_TODAY", "MASS_END_DATE_BEFORE_PROJECT_START_DATE", "MASS_END_DATE_BEFORE_MASS_START_DATE", "MASS_END_DATE_BEFORE_TODAY", "PROJECT_END_DATE_MUST_BE_UPDATED", "PROJECT_LOCATION_ON_WATER", "LANDFILL_LOCATION_ON_WATER", "OPEN_FROM_AFTER_OPEN_TO", "NO_OPEN_WORK_DAY", "API_KEY_NOT_SPECIFIED", "API_KEY_INVALID", "INVALID_LOCATION", "PHONE_NUMBER_EXISTS", "PHONE_NUMBER_HAVE_TO_BE_LOCAL_OR_INTERNATIONAL", "PHONE_NUMBER_TOO_SHORT", "PHONE_NUMBER_TOO_LONG"])
      unless validator.valid?(code)
        fail ArgumentError, "invalid value for \"code\", must be one of #{validator.allowable_values}."
      end
      @code = code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          message == o.message &&
          timestamp == o.timestamp &&
          status_code == o.status_code &&
          code == o.code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [message, timestamp, status_code, code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
