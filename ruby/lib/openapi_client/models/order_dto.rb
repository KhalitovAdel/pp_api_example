=begin
#Integration

#         Here can be some description if that needed     

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class OrderDto
    # Ordernummer
    attr_accessor :id

    # Orderstatus
    attr_accessor :order_status

    # Kund
    attr_accessor :customer_id

    attr_accessor :delivery_address

    # Synkronisering status
    attr_accessor :last_sync_status

    # Levererad volym
    attr_accessor :delivered_volume

    # Skapades
    attr_accessor :created_at

    # Senast ändrad
    attr_accessor :updated_at

    # Synkronisera
    attr_accessor :last_sync_at

    # Dokumentnummer
    attr_accessor :document_number

    # Projektnummer
    attr_accessor :project_number

    # Ansvarig säljare
    attr_accessor :sales_responsible

    # Orderdatum
    attr_accessor :order_date

    # Leveransdatum
    attr_accessor :delivery_date

    # Planerat Startdatum
    attr_accessor :planned_start_date

    attr_accessor :deleted_at

    attr_accessor :updated_by

    # Mottagarnamn
    attr_accessor :delivery_name

    # Leveranser
    attr_accessor :delivery_line_count

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'order_status' => :'orderStatus',
        :'customer_id' => :'customerId',
        :'delivery_address' => :'deliveryAddress',
        :'last_sync_status' => :'lastSyncStatus',
        :'delivered_volume' => :'deliveredVolume',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'last_sync_at' => :'lastSyncAt',
        :'document_number' => :'documentNumber',
        :'project_number' => :'projectNumber',
        :'sales_responsible' => :'salesResponsible',
        :'order_date' => :'orderDate',
        :'delivery_date' => :'deliveryDate',
        :'planned_start_date' => :'plannedStartDate',
        :'deleted_at' => :'deletedAt',
        :'updated_by' => :'updatedBy',
        :'delivery_name' => :'deliveryName',
        :'delivery_line_count' => :'deliveryLineCount'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'order_status' => :'String',
        :'customer_id' => :'String',
        :'delivery_address' => :'OrderDtoDeliveryAddress',
        :'last_sync_status' => :'String',
        :'delivered_volume' => :'Float',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'last_sync_at' => :'Time',
        :'document_number' => :'String',
        :'project_number' => :'String',
        :'sales_responsible' => :'String',
        :'order_date' => :'String',
        :'delivery_date' => :'String',
        :'planned_start_date' => :'String',
        :'deleted_at' => :'Time',
        :'updated_by' => :'String',
        :'delivery_name' => :'String',
        :'delivery_line_count' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'last_sync_at',
        :'document_number',
        :'project_number',
        :'sales_responsible',
        :'order_date',
        :'delivery_date',
        :'planned_start_date',
        :'deleted_at',
        :'updated_by',
        :'delivery_name',
        :'delivery_line_count'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrderDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrderDto`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'order_status')
        self.order_status = attributes[:'order_status']
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'delivery_address')
        self.delivery_address = attributes[:'delivery_address']
      end

      if attributes.key?(:'last_sync_status')
        self.last_sync_status = attributes[:'last_sync_status']
      end

      if attributes.key?(:'delivered_volume')
        self.delivered_volume = attributes[:'delivered_volume']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'last_sync_at')
        self.last_sync_at = attributes[:'last_sync_at']
      end

      if attributes.key?(:'document_number')
        self.document_number = attributes[:'document_number']
      end

      if attributes.key?(:'project_number')
        self.project_number = attributes[:'project_number']
      end

      if attributes.key?(:'sales_responsible')
        self.sales_responsible = attributes[:'sales_responsible']
      end

      if attributes.key?(:'order_date')
        self.order_date = attributes[:'order_date']
      end

      if attributes.key?(:'delivery_date')
        self.delivery_date = attributes[:'delivery_date']
      end

      if attributes.key?(:'planned_start_date')
        self.planned_start_date = attributes[:'planned_start_date']
      end

      if attributes.key?(:'deleted_at')
        self.deleted_at = attributes[:'deleted_at']
      end

      if attributes.key?(:'updated_by')
        self.updated_by = attributes[:'updated_by']
      end

      if attributes.key?(:'delivery_name')
        self.delivery_name = attributes[:'delivery_name']
      end

      if attributes.key?(:'delivery_line_count')
        self.delivery_line_count = attributes[:'delivery_line_count']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @order_status.nil?
        invalid_properties.push('invalid value for "order_status", order_status cannot be nil.')
      end

      if @customer_id.nil?
        invalid_properties.push('invalid value for "customer_id", customer_id cannot be nil.')
      end

      if @delivery_address.nil?
        invalid_properties.push('invalid value for "delivery_address", delivery_address cannot be nil.')
      end

      if @last_sync_status.nil?
        invalid_properties.push('invalid value for "last_sync_status", last_sync_status cannot be nil.')
      end

      if @delivered_volume.nil?
        invalid_properties.push('invalid value for "delivered_volume", delivered_volume cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @order_status.nil?
      order_status_validator = EnumAttributeValidator.new('String', ["CLOSED", "OPENED"])
      return false unless order_status_validator.valid?(@order_status)
      return false if @customer_id.nil?
      return false if @delivery_address.nil?
      return false if @last_sync_status.nil?
      last_sync_status_validator = EnumAttributeValidator.new('String', ["ERROR", "SUCCESS", "UNKNOWN"])
      return false unless last_sync_status_validator.valid?(@last_sync_status)
      return false if @delivered_volume.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] order_status Object to be assigned
    def order_status=(order_status)
      validator = EnumAttributeValidator.new('String', ["CLOSED", "OPENED"])
      unless validator.valid?(order_status)
        fail ArgumentError, "invalid value for \"order_status\", must be one of #{validator.allowable_values}."
      end
      @order_status = order_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_sync_status Object to be assigned
    def last_sync_status=(last_sync_status)
      validator = EnumAttributeValidator.new('String', ["ERROR", "SUCCESS", "UNKNOWN"])
      unless validator.valid?(last_sync_status)
        fail ArgumentError, "invalid value for \"last_sync_status\", must be one of #{validator.allowable_values}."
      end
      @last_sync_status = last_sync_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          order_status == o.order_status &&
          customer_id == o.customer_id &&
          delivery_address == o.delivery_address &&
          last_sync_status == o.last_sync_status &&
          delivered_volume == o.delivered_volume &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          last_sync_at == o.last_sync_at &&
          document_number == o.document_number &&
          project_number == o.project_number &&
          sales_responsible == o.sales_responsible &&
          order_date == o.order_date &&
          delivery_date == o.delivery_date &&
          planned_start_date == o.planned_start_date &&
          deleted_at == o.deleted_at &&
          updated_by == o.updated_by &&
          delivery_name == o.delivery_name &&
          delivery_line_count == o.delivery_line_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, order_status, customer_id, delivery_address, last_sync_status, delivered_volume, created_at, updated_at, last_sync_at, document_number, project_number, sales_responsible, order_date, delivery_date, planned_start_date, deleted_at, updated_by, delivery_name, delivery_line_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
